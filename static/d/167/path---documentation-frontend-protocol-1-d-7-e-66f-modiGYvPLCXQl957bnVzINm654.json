{"data":{"mdx":{"id":"377559fd-4d6d-5280-9b60-dc6b46ea14b9","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Table Of Contents`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"#methods\"\n      }\n    }, `API Methods`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"#from-front-end-to-back-end\"\n      }\n    }, `Backend`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#edit-namespace\"\n      }\n    }, `Edit Commands`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#plugin-namespace\"\n      }\n    }, `Plugin Commands`)))), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"#from-back-end-to-front-end\"\n      }\n    }, `Frontend`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#status-bar-commands\"\n      }\n    }, `Status Bar Commands`))))))), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Methods`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `These are mostly described by example rather than specified in detail.\nThey are given in shorthand, eliding the JSON-RPC boilerplate. For\nexample, the actual interaction on the wire for `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `new_view`), ` is:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `to core: {\"id\":0,\"method\":\"new_view\",\"params\":{}}\nfrom core: {\"id\":0,\"result\": \"view-id-1\"}\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `From front-end to back-end`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `client_started`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `client_started {\"config_dir\" \"some/path\"?, \"client_extras_dir\":\n\"some/other/path\"?}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sent by the client immediately after establishing the core connection. This is\nused to perform initial setup. The two arguments are optional; the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `config_dir`), `\npoints to a directory where the user's config files and plugins live, and the\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `client_extras_dir`), ` points to a directory where the frontend can package\nadditional resources, such as bundled plugins.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `new_view`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `new_view { \"file_path\": \"path.md\"? }`), ` -> `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"view-id-1\"`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Creates a new view, returning the view identifier as a string.\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `file_path`), ` is optional; if specified, the file is loaded into a new\nbuffer; if not a new empty buffer is created. Currently, only a\nsingle view into a given file can be open at a time.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Note:`), `, there is currently no mechanism for reporting errors. Also\nnote, the protocol delegates power to load and save arbitrary files.\nThus, exposing the protocol to any other agent than a front-end in\ndirect control should be done with extreme caution.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `close_view`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `close_view {\"view_id\": \"view-id-1\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Closes the view associated with this `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `view_id`), `.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `save`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `save {\"view_id\": \"view-id-4\", \"file_path\": \"save.txt\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Saves the buffer associated with `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `view_id`), ` to `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `file_path`), `. See the\nnote for `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `new_view`), `. Errors are not currently reported.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `set_theme`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `set_theme {\"theme_name\": \"InspiredGitHub\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Asks core to change the theme. If the change succeeds the client\nwill receive a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `theme_changed`), ` notification.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `set_language`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `set_language {\"view-id\":\"view-id-1\", \"language_id\":\"Rust\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Asks core to change the language of the buffer associated with the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `view_id`), `.\nIf the change succeeds the client will receive a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `language_changed`), ` notification.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `modify_user_config`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `modify_user_config { \"domain\": Domain, \"changes\": Object }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Modifies the user's config settings for the given domain. `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Domain`), ` should be\neither the string `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"general\"`), ` or an object of the form `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `{\"syntax\": \"rust\"}`), `, or\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `{\"user_override\": \"view-id-1\"}`), `, where `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"rust\"`), ` is any valid syntax identifier,\nand `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `\"view-id-1\"`), ` is the identifier of any open view.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `get_config`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `get_config {\"view_id\": \"view-id-1\"} -> Object`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Returns the config table for the view associated with this `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `view_id`), `.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `edit namespace`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `edit {\"method\": \"insert\", \"params\": {\"chars\": \"A\"}, \"view_id\":\n\"view-id-4\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Dispatches the inner method to the per-tab handler, with individual\ninner methods described below:`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Edit methods`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `insert`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `insert {\"chars\":\"A\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Inserts the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `chars`), ` string at the current cursor locations.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `paste`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `paste {\"chars\": \"password\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Inserts the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `chars`), ` string at the current cursor locations. If there are\nmultiple cursors and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `chars`), ` has the same number of lines as there are\ncursors, one line will be inserted at each cursor, in order; otherwise the full\nstring will be inserted at each cursor.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `copy`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `copy -> String|Null`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Copies the active selection, returning their contents or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Null`), ` if the selection was empty.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `cut`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `cut -> String|Null`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Cut the active selection, returning their contents or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Null`), ` if the selection was empty.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `scroll`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `scroll [0,18]`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the back-end of the visible scroll region, defined as the\nfirst and last (non-inclusive) formatted lines. The visible scroll\nregion is used to compute movement distance for page up and page down\ncommands, and also controls the size of the fragment sent in the\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `update`), ` method.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `resize`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `resize {width: 420, height: 400}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the backend that the size of the view has changed. This is\nused for word wrapping, if enabled. Width and height are specified\nin px units / points, not display pixels.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `click`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `click [42,31,0,1]`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Implements a mouse click. The array arguments are: line and column\n(0-based, utf-8 code units), modifiers (again, 2 is shift), and\nclick count.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `drag`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `drag [42,32,0]`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Implements dragging (extending a selection). Arguments are line,\ncolumn, and flag as in `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `click`), `.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `gesture`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `gesture {\"line\": 42, \"col\": 31, \"ty\": \"toggle_sel\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Note:`), ` both `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `click`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `drag`), ` functionality will be migrated to\nadditional `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ty`), ` options for `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `gesture`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Currently, the following gestures are supported:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `point_select # moves the cursor to a point\ntoggle_sel # adds or removes a selection at a point\nrange_select # modifies the selection to include a point (shift+click)\nline_select # sets the selection to a given line\nword_select # sets the selection to a given word\nmulti_line_select # adds a line to the selection\nmulti_word_select # adds a word to the selection\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `goto_line`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `goto_line {\"line\": 1}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sets the cursor to the beginning of the provided `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `line`), ` and scrolls to\nthis position.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Other movement and deletion commands`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following edit methods take no parameters, and have similar\nmeanings as NSView actions. The pure movement and selection\nmodification methods will be migrated to a more general method\nthat takes a \"movement\" enum as a parameter.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `delete_backward\ndelete_forward\ninsert_newline\nduplicate_line\nmove_up\nmove_up_and_modify_selection\nmove_down\nmove_down_and_modify_selection\nmove_left\nmove_left_and_modify_selection\nmove_right\nmove_right_and_modify_selection\nscroll_page_up\npage_up_and_modify_selection\nscroll_page_down\npage_down_and_modify_selection\nyank\ntranspose\nselect_all\ncollapse_selections\nadd_selection_above\nadd_selection_below\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Transformations`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following methods act by modifying the current selection.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `uppercase\nlowercase\ncapitalize\nindent\noutdent\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Number Transformations`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following methods work with a caret or multiple selections. If the beginning of a selection (or the caret) is within a positive or negative number, the number will be transformed accordingly:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `increase_number\ndecrease_number\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Recording`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `These methods allow manipulation and playback of event recordings.`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `If there is no currently active recording, start recording events under the provided name.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `If there is no provided name, the current recording is saved.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `If the name provided matches the current recording name, the current recording is saved.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `If the name provided does not match the current recording name, the events for the current recording are dismissed.`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `toggle_recording {\n    \"recording_name\"?: string\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Execute a set of recorded events and modify the document state:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `play_recording {\n    \"recording_name\": string\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Completely remove a specific recording:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `clear_recording {\n    \"recording_name\": string\n}\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Language Support Oriented features (in Edit Namespace)`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Hover`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Get Hover for a position in file. The request for `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `hover`), ` is made as a notification. The client is forwarded result back via a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `show_hover`), ` rpc`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If position is skipped in the request, current cursor position will be used in core.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `request_hover {\n    \"request_id\": number,\n    \"position\"?: Position\n}\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-ts\"\n      }\n    }, `interface Position {\n    line: number,\n    column: number,\n}\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Plugin namespace`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Note:`), ` plugin commands are in flux, and may change.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Example`), `: The following RPC dispatches the inner method to the plugin manager.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `plugin {\"method\": \"start\", params: {\"view_id\": \"view-id-1\", plugin_name: \"syntect\"}}`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Plugin methods`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `start`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `start {\"view_id\": \"view-id-1\", \"plugin_name\": \"syntect\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Starts the named plugin for the given view.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `stop`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `stop {\"view_id\": \"view-id-1\", \"plugin_name\": \"syntect\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Stops the named plugin for the given view.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `plugin_rpc`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `plugin_rpc {\"view_id\": \"view-id-1\", \"receiver\": \"syntect\",\n            \"notification\": {\n                \"method\": \"custom_method\",\n                \"params\": {\"foo\": \"bar\"},\n            }}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sends a custom rpc command to the named receiver. This may be a notification\nor a request.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Find and replace methods`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `find`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `find {\"chars\": \"a\", \"case_sensitive\": false, \"regex\": false, \"whole_words\": true}`), `\nParameters `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `regex`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `whole_words`), ` are optional and by default `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `false`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sets the current search query and options.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `multi_find`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This find command supports multiple search queries.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `multi_find [{\"id\": 1, \"chars\": \"a\", \"case_sensitive\": false, \"regex\": false, \"whole_words\": true}]`), `\nParameters `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `regex`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `whole_words`), ` are optional and by default `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `false`), `. `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `id`), ` is an optional parameter\nused to uniquely identify a search query. If left empty, the query is considered as a new query and\nthe backend will generate a new ID.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sets the current search queries and options.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `find_next and find_previous`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `find_next {\"wrap_around\": true, \"allow_same\": false, \"modify_selection\": \"set\"}`), React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `find_previous {\"wrap_around\": true, \"allow_same\": false, \"modify_selection\": \"set\"}`), `\nAll parameters are optional. Boolean parameters are by default `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `false`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `modify_selection`), `\nis `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `set`), ` by default. If `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `allow_same`), ` is set to `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `true`), ` the current selection is considered a\nvalid next occurrence. Supported options for `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `modify_selection`), ` are:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `none`), `: the selection is not modified`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `set`), `: the next/previous match will be set as the new selection`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `add`), `: the next/previous match will be added to the current selection`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `add_remove_current`), `: the previously added selection will be removed and the next/previous\nmatch will be added to the current selection`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Selects the next/previous occurrence matching the search query.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `find_all`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `find_all { }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Selects all occurrences matching the search query.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `highlight_find`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `highlight_find {\"visible\": true}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Shows/hides active search highlights.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `selection_for_find`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `selection_for_find {\"case_sensitive\": false}`), `\nThe parameter `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `case_sensitive`), ` is optional and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `false`), ` if not set.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sets the current selection as the search query.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `replace`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `replace {\"chars\": \"a\", \"preserve_case\": false}`), `\nThe parameter `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `preserve_case`), ` is currently not implemented and ignored.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sets the replacement string.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `selection_for_replace`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `selection_for_replace {\"case_sensitive\": false}`), `\nThe parameter `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `case_sensitive`), ` is optional and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `false`), ` if not set.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sets the current selection as the replacement string.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `replace_next`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `replace_next { }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Replaces the next matching occurrence with the replacement string.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `replace_all`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `replace_all { }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Replaces all matching occurrences with the replacement string.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `selection_into_lines`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `selection_into_lines { }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Splits all current selections into lines.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `From back-end to front-end`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `View update protocol`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The following three methods are used to update the view's contents. The design\nof the view update protocol, has a few particular goals in mind:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Keep everything async.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Keep network traffic minimal.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Allow the front-end to retain as much information as possible (including text\nif only cursors are updated).`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Allow the front-end to use small amounts of memory even when document is\nlarge.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Conceptually, the core maintains a full view of the document, which can be\nconsidered an array of lines. Each line consists of the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `text`), ` (a string), a set\nof `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `cursor`), ` locations, and a structure representing `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `style`), ` information. Many\noperations update this view, at which point the core sends an `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `update`), `\nnotification to the front-end.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The front-end maintains a `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `cache`), ` of this view. Some lines will be present,\nothers will be missing. A cache is consistent with the true state when all\npresent lines match.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To optimize communication, the core keeps some state about the client. One bit\nof this state is the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `scroll window;`), ` in general, the core tries to proactively\nupdate all lines within this window (plus a certain amount of slop on top and\nbottom). In addition, the core maintains a set of lines in the client's cache.\nIf a line changes, the update need only be communicated if it is in this set.\nThis set is conservative; if a line is missing in the actual cache held by the\nfront-end (evicted to save memory), no great harm is done updating it. The\nfrontend reports this scroll window to the core by using the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `scroll`), ` method of\nthe `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `edit`), ` notification.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `def_style`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `def_style\n  id: number\n  fg_color?: number // 32-bit ARGB (word-order) value\n  bg_color?: number // 32-bit ARGB (word-order) value, default 0\n  weight?: number // 100..900, default 400\n  italic?: boolean  // default false\n  underline?: boolean // default false\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `(It's not hard to imagine more style properties such as typeface, size, OpenType\nfeatures, etc).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The guarantee on `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `id`), ` is that it is not currently in use in any lines in the\nview. However, in practice, it will probably just count up. It can also be\nassumed to be small, so using it as an index into a dense array is reasonable.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `There are two reserved style IDs, so new style IDs will begin at 2. Style ID 0\nis reserved for selections and ID 1 is reserved for find results.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `scroll_to`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `scroll_to: [number, number]  // line, column (in utf-8 code units)\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This notification indicates that the frontend should scroll its cursor to the\ngiven line and column.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `update`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `update\n  rev?: number\n  ops: Op[]\n  view-id: string\n  pristine: bool\n\ninterface Op {\n  op: \"copy\" | \"skip\" | \"invalidate\" | \"update\" | \"ins\"\n  n: number  // number of lines affected\n  lines?: Line[]  // only present when op is \"update\" or \"ins\"\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `pristine`), ` flag indicates whether or not, after this update, this document\nhas unsaved changes.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `rev`), ` field is not present in current builds, but will be at some point in\nthe future.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `An update request can be seen as a function from the old client cache state to a\nnew one. During evaluation, maintain an index (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `old_ix`), `) into the old `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `lines`), `\narray, initially 0, and a new lines array, initially empty. `, `[Note that this\ndocument specifies the semantics. The actual implementation will almost\ncertainly represent at least initial and trailing sequences of invalid lines by\ntheir count; and the editing operations may be more efficiently done in-place\nthan by copying from the old state to the new]`, `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The \"copy\" op appends the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `n`), ` lines `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `[old_ix .. old_ix + n]`), ` to the new lines\narray, and increments `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `old_ix`), ` by `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `n`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The \"skip\" op increments `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `old_ix`), ` by `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `n`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The \"invalidate\" op appends n invalid lines to the new lines array.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The \"ins\" op appends new lines, specified by the \"`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `lines`), `\" parameter, specified\nin more detail below. For this op, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `n`), ` must equal `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `lines.length`), ` (alternative:\nmake n optional in this case). It does not update `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `old_ix`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The \"update\" op updates the cursor and/or style of n existing lines. As in\n\"ins\", n must equal lines.length. It also increments `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `old_ix`), ` by `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `n`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Note:`), ` The \"update\" op is not currently used by core.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In all cases, n is guaranteed positive and nonzero (as a consequence, any line\npresent in the old state is copied at most once to the new state).`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `interface Line {\n  text?: string  // present when op is \"update\"\n  cursor?: number[]  // utf-8 code point offsets, in increasing order\n  styles?: number[]  // length is a multiple of 3, see below\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The interpretation of a line is different for \"update\" or \"ins\" ops. In an \"ins\"\nop, text is always present, and missing cursor or styles properties are\ninterpreted as empty (no cursors on that line, no styles).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In an \"update\" op, then the text property is absent from the line, and text is\ncopied from the previous state (or left invalid if the previous state is\ninvalid), and the cursor and styles are updated if present. To delete cursors\nfrom a line, the core sets the cursor property to the empty list.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The styles property represents style spans, in an efficient encoding. It is\nconceptually an array of triples (though flattened, so triple at is\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `styles[i*3]`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `styles[i*3 + 1]`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `styles[i*3 + 2]`), `). The first element of the\ntriple is the start index (in utf-8 code units), but encoded as a delta relative\nto the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `end`), ` of the last span (or relative to 0 for the first triple). It may be\nnegative, if spans overlap. The second element is the length (in utf-8 code\nunits). It is guaranteed nonzero and positive. The third element is a style id.\nThe core guarantees that any style id sent in a styles property will have\npreviously been set in a set_style request.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The number of lines in the new lines array always matches the view as maintained\nby the core. Another way of saying this is that adding all \"`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `n`), `\" values except\nfor \"skip\" operations is the number of lines. `, `[Discussion: the last line always\nrepresents a partial line, so an empty document is one empty line. But I think\nthe initial state should be the empty array. Then, the empty array represents\nthe state that no updates have been processed]`, `.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `interface Line {\n  text?: string  // present when op is \"update\"\n  cursor?: number[]  // utf-8 code point offsets, in increasing order\n  styles?: number[]  // length is a multiple of 3, see below\n}\n`)), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `measure_width`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `measure_width [{\"id\": number, \"strings\": string[]}] <- {\"id\":0, \"result\":[[28.0,8.0]]}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Asks the frontend to measure the display widths (the width when rendered and presented on screen) of a group of strings. The frontend should return an array of arrays, one for each item in the input array, containing the widths of each of that item's strings when rendered with the style indicated by that items id argument.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `These widths are used to determine how to `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://xi-editor.github.io/xi-editor/docs/rope_science_05.html\"\n      }\n    }, `calculate line breaks`), ` and other attributes that depend on the behaviour of the client's text rendering system.`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `theme_changed`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `theme_changed {\"name\": \"InspiredGitHub\", \"theme\": Theme}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client that the theme has been changed. The client should\nuse the new theme to set colors as appropriate. The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Theme`), ` object is\ndirectly serialized from a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/trishume/syntect/blob/master/src/highlighting/theme.rs#L27\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"a\"\n    }, `syntect::highlighting::ThemeSettings`)), `\ninstance.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `available_themes`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `available_themes {\"themes\": [\"InspiredGitHub\"]}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client of the available themes.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `language_changed`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `language_changed {\"view_id\": \"view-id-1\", \"language_id\": \"Rust\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client that the language used for syntax highlighting has been changed.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `available_languages`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `available_languages {\"languages\": [\"Rust\"]}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client of the available languages.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `config_changed`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `config_changed {\"view_id\": \"view-id-1\", \"changes\": {} }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client that the config settings for a view have changed.\nThis is called once when a new view is created, with `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `changes`), ` containing\nall config settings; afterwards `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `changes`), ` only contains the key/value\npairs that have new values.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `available_plugins`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `available_plugins {\"view_id\": \"view-id-1\", \"plugins\": [{\"name\": \"syntect\",\n\"running\": true]}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client of the plugins available to the given view.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `plugin_started`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `plugin_started {\"view_id\": \"view-id-1\", \"plugin\": \"syntect\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client that the named plugin is running.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `plugin_stopped`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `plugin_stopped {\"view_id\": \"view-id-1\", \"plugin\": \"syntect\", \"code\" 101}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client that the named plugin has stopped. The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `code`), ` field is an\ninteger exit code; currently 0 indicates a user-initiated exit and 1 indicates\nan abnormal exit, i.e. a plugin crash.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `update_cmds`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `update_cmds {\"view_id\": \"view-id-1\", \"plugin\", \"syntect\", \"cmds\": [Command]}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client of a change in the available commands for a given plugin.\nThe `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `cmds`), ` field is a list of all commands currently available to this plugin.\nClients should store commands on a per-plugin basis; when the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `cmds`), ` argument is\nan empty list it means that this plugin is providing no commands; any previously\navailable commands should be disabled.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The format for describing a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Command`), ` is in flux. The best place to look for\na working example is in the tests in core-lib/src/plugins/manifest.rs. As of\nthis writing, the following is valid json for a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Command`), ` object:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-json\"\n      }\n    }, `    {\n        \"title\": \"Test Command\",\n        \"description\": \"Passes the current test\",\n        \"rpc_cmd\": {\n            \"rpc_type\": \"notification\",\n            \"method\": \"test.cmd\",\n            \"params\": {\n                \"view\": \"\",\n                \"non_arg\": \"plugin supplied value\",\n                \"arg_one\": \"\",\n                \"arg_two\": \"\"\n            }\n        },\n        \"args\": [\n            {\n                \"title\": \"First argument\",\n                \"description\": \"Indicates something\",\n                \"key\": \"arg_one\",\n                \"arg_type\": \"Bool\"\n            },\n            {\n                \"title\": \"Favourite Number\",\n                \"description\": \"A number used in a test.\",\n                \"key\": \"arg_two\",\n                \"arg_type\": \"Choice\",\n                \"options\": [\n                    {\"title\": \"Five\", \"value\": 5},\n                    {\"title\": \"Ten\", \"value\": 10}\n                ]\n            }\n        ]\n    }\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Language Support Specific Commands`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Show Hover`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `show_hover { request_id: number, result: string }`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Status Bar Commands`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `add_status_item`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `add_status_item { \"source\": \"status_example\", \"key\": \"my_key\", \"value\": \"hello\", \"alignment\": \"left\" }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Adds a status item, which will be displayed on the frontend's status bar. Status items have a reference to whichever plugin added them. The alignment key dictates whether this item appears on the left side or the right side of the bar. This alignment can only be set when the item is added.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `update_status_item`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `update_status_item { \"key\": \"my_key\", \"value\": \"hello\"}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Update a status item with the specified key with the new value.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `remove_status_item`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `remove_status_item { \"key\": \"my_key\" }`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Removes a status item from the front end.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Find and replace commands`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `find_status`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Find supports multiple search queries.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `find_status {\"view_id\": \"view-id-1\", \"queries\": [{\"id\": 1, \"chars\": \"a\", \"case_sensitive\": false, \"is_regex\": false, \"whole_words\": true, \"matches\": 6, \"lines\": [1, 3, 3, 6]}]}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client about the current search queries and search options. `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `lines`), ` indicates for each match its line number.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `replace_status`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `replace_status {\"view_id\": \"view-id-1\", \"status\": {\"chars\": \"a\", \"preserve_case\": false}}`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Notifies the client about the current replacement string and replace options.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Other future extensions`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Things the protocol will need to cover:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Dirty state (for visual indication and dialog on unsaved changes).`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Minimal invalidation.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `General configuration options (word wrap, etc).`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Display of autocomplete options.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `...`))));\n  }\n\n}"},"excerpt":"Table Of Contents API Methods Backend Edit Commands Plugin Commands Frontend Status Bar Commands Methods These are mostly described by example rather than specified in detail.\nThey are given in shorthand, eliding the JSON-RPC boilerplate. For\nexample, the actual interaction on the wire for  new_view…","frontmatter":{"title":"The Frontend Protocol"}},"allMdx":{"edges":[{"node":{"id":"377559fd-4d6d-5280-9b60-dc6b46ea14b9","fields":{"slug":"/frontend-protocol.1/"},"frontmatter":{"title":"The Frontend Protocol"}}},{"node":{"id":"eb5c18e5-3b3e-5724-b55a-a3c1a6cfd2b6","fields":{"slug":"/frontend-notes/"},"frontmatter":{"title":"Notes on writing front-ends"}}},{"node":{"id":"bcf93b0a-ce67-5b53-9d9c-cb8cecedda7c","fields":{"slug":"/frontend-protocol/"},"frontmatter":{"title":"The Frontend Protocol"}}},{"node":{"id":"586f0992-4df6-5aff-ab4d-4d001717fdb7","fields":{"slug":"/plugin/"},"frontmatter":{"title":"Plugin architecture"}}},{"node":{"id":"c52e11a1-2ec8-5aed-ae24-c348d815e5ad","fields":{"slug":"/config/"},"frontmatter":{"title":"Working with the config system"}}},{"node":{"id":"8d6ee533-793b-53cc-87a1-2f1c34e2c2f2","fields":{"slug":"/crdt/"},"frontmatter":{"title":"CRDT - An approach to async plugins and undo"}}},{"node":{"id":"f0e30ba2-3b2d-549c-9b6a-735be81510c2","fields":{"slug":"/crdt-details/"},"frontmatter":{"title":"CRDT - The Xi Text Engine"}}},{"node":{"id":"5bbb9cf5-ff60-52f8-a003-e3882a1b7309","fields":{"slug":"/fuchsia-ledger-crdts/"},"frontmatter":{"title":"CRDT - Using the Ledger for CRDTs"}}},{"node":{"id":"375a35e7-76a5-5da9-bc31-5a3938b28218","fields":{"slug":"/rope-science-00/"},"frontmatter":{"title":"Rope science - Introduction"}}},{"node":{"id":"b28f280e-b2e5-5eee-9d5e-f605fbcdd251","fields":{"slug":"/rope-science-01/"},"frontmatter":{"title":"Rope science, part 1 - MapReduce for text"}}},{"node":{"id":"2c0fcbef-2a60-531f-a7e2-b1d13b72d4d9","fields":{"slug":"/rope-science-02/"},"frontmatter":{"title":"Rope science, part 2 - metrics"}}},{"node":{"id":"bfa895b4-5b90-5766-87d3-73300d6c75e6","fields":{"slug":"/rope-science-03/"},"frontmatter":{"title":"Rope science, part 3 - Grapheme cluster boundaries"}}},{"node":{"id":"177edfe8-21d9-539d-9bb8-467da07dfae9","fields":{"slug":"/rope-science-04/"},"frontmatter":{"title":"Rope science, part 4 - parenthesis matching"}}},{"node":{"id":"a4c8952a-ee4f-5ff0-bd25-caa35f52e05a","fields":{"slug":"/rope-science-05/"},"frontmatter":{"title":"Rope science, part 5 - incremental word wrapping"}}},{"node":{"id":"e39af624-e9c6-5ea2-b6fc-2ed34020ec09","fields":{"slug":"/rope-science-06/"},"frontmatter":{"title":"Rope science, part 6 - parallel and asynchronous word wrapping"}}},{"node":{"id":"d5d0c9f5-2466-5157-b327-4c09985966c6","fields":{"slug":"/rope-science-08/"},"frontmatter":{"title":"Rope science, part 8 - CRDTs for concurrent editing"}}},{"node":{"id":"c0341fdb-b2d4-5957-94f7-b7281de4c70e","fields":{"slug":"/rope-science-09/"},"frontmatter":{"title":"Rope science, part 9 - CRDT Approach to Async Plugins and Undo"}}},{"node":{"id":"04583f02-ba9e-507e-95a0-a481d948f8a5","fields":{"slug":"/rope-science-10/"},"frontmatter":{"title":"Rope science, part 10 - designing for a conflict-free world"}}},{"node":{"id":"996c58eb-59ad-5e1e-841e-382fc08d23bb","fields":{"slug":"/rope-science-11/"},"frontmatter":{"title":"Rope science, part 11 - practical syntax highlighting"}}},{"node":{"id":"e118ecf7-5013-50ec-90b2-1f56d7bb1bac","fields":{"slug":"/rope-science-12/"},"frontmatter":{"title":"Rope science, part 12 - minimal invalidation"}}}]}},"pageContext":{"id":"377559fd-4d6d-5280-9b60-dc6b46ea14b9"}}