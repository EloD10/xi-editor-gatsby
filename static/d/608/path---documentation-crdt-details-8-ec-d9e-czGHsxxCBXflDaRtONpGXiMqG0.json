{"data":{"markdownRemark":{"id":"e7b10047-5613-53ea-bdeb-3989cfe8ac10","html":"<!-- See https://www.figma.com/file/UGOAcpKR5WIP81t3DGPIP2dR/CRDT-Merge-Diagrams for the source of the diagrams -->\n<p>This document contains a detailed description of the data structures and operations Xi uses for text. These data structures and the <code class=\"language-text\">merge</code> operation also form a Conflict-free Replicated Data Type (CRDT). It being a CRDT allows Xi to be used for concurrent editing of text on multiple devices, it can merge edits, including those made offline, between multiple devices and converge on a consistent document that includes all changes.</p>\n<p>Beyond synchronizing text, these data structures and operations allow Xi to handle asynchronous editing of the text from plugins, support undo and redo, and allow incremental updating of editor state and the view based on differences between revisions.</p>\n<p>Many of these data structures and operations have been in Xi for a while but they've recently been heavily overhauled and extended as part of <a href=\"https://github.com/xi-editor/xi-editor/issues/250\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a project</a> that added multi-device syncing support via the CRDT merge operation. This was done for <a href=\"https://fuchsia.googlesource.com/topaz/+/master/bin/xi/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use on the Fuchsia operating system</a>, where it uses <a href=\"https://fuchsia.googlesource.com/peridot/+/HEAD/docs/ledger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ledger</a> to synchronize documents between devices.</p>\n<p>What follows is both a description of a data structure for text and a code tour of the <code class=\"language-text\">xi-rope</code> crate. It describes the actual Rust data structures and algorithms used, because the primary novelty and difficulty of this CRDT is in the optimized representation that allows for better time and memory complexity. If you want an overview of the motivation behind using a CRDT and a conceptual description of what the CRDT does see <a href=\"/static/crdt-23cace273764fa85cfd75547d17231af.md\"><code class=\"language-text\">crdt.md</code></a>. The intended audience is anyone interested in implementing CRDTs, anyone who wants to work on Xi, or just anyone curious enough.</p>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#motivation\">Motivation</a>: Why Xi's CRDT is the way it is.</li>\n<li><a href=\"#representation\">Representation</a>: Describes the representation Xi uses to implement the CRDT in a memory and time efficient way.</li>\n<li><a href=\"#operations\">Operations</a>: Describes all the operations implemented on the representation to allow it to support undo, asynchronous edits, distributed synchronization and more.</li>\n<li><a href=\"#enginemerge\">Engine::merge</a>: Description of the CRDT merge operation used for multi-device syncing.</li>\n</ul>\n<h2 id=\"motivation\"><a href=\"#motivation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivation</h2>\n<p>The Xi CRDT attempts to have a number of properties that many other asynchronous text editing solutions don't:</p>\n<ul>\n<li>Usable without a central server: Even though the Fuchsia Ledger does sync to a cloud server, it can't actually inspect the data or perform operations, so conflict resolution must be possible on every device independently.</li>\n<li>Support large documents: The memory complexity of the representation and the time complexity of common operations should be low enough to support very large text documents like books or long code files.</li>\n<li>Support long histories: Similarly, documents that have gone through many edits should be efficient to edit both in time and memory.</li>\n</ul>\n<p>As of the time this document was written, it satisfies all of these properties to some extent, but some operations and representations are not as memory and time efficient as we'd like. However, everything has been designed with a few more key optimizations in mind. Those optimizations should bring the memory and time complexity down to where we want.</p>\n<h3 id=\"transform-property-2-tp2-and-operational-transforms\"><a href=\"#transform-property-2-tp2-and-operational-transforms\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transform Property 2 (TP2) and Operational Transforms</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Operational_transformation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Operational Transformation (OT)</a> is a common way to implement asynchronous text editing. It works by sending <em>operations</em> like inserts and deletes between peers and transforming them to apply to the current text. Unfortunately many implementations of OT have a problem where they don't always preserve ordering when text is deleted.</p>\n<p>For example see the following diagram showing 3 peers sending edits between each other ending up in an inconsistent state. The arrows represent operations being sent asynchronously between devices in a peer-to-peer editing system based on OT, with time progressing downward. Whenever an edit is made the operation is sent to all other peers, but due to asynchronous communication they can be arbitrarily delayed. When an operation arrives at a peer it is transformed and applied to the current text. For clarity, not all arrows are shown, but you can imagine that the arrival of missing sends just got delayed past the end of the diagram.</p>\n<p><img src=\"img/tp2.png\" alt=\"TP2 Problem\"></p>\n<p>Acting consistently in cases like this is called having \"Transform Property 2\" (see <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.933&#x26;rep=rep1&#x26;type=pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Operational Transformation in Real-Time Group Editors:\nIssues, Algorithms, and Achievements</a> by Sun &#x26; Ellis, 1998). One approach to the problem is to serialize all edits through a central server which does all the transformation. With this approach, the ordering relative to deleted text may not be preserved, but at least all clients will converge to the same state. This is what Google Docs and many other collaborative editing systems do.</p>\n<p>Xi avoids this problem by using \"tombstones\" (see <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.103.2679&#x26;rep=rep1&#x26;type=pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tombstone Transformation Functions for Ensuring Consistency in Collaborative Editing Systems</a>), which leave deleted characters in the representation so that ordering can be preserved. This will be described in detail later.</p>\n<h2 id=\"representation\"><a href=\"#representation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Representation</h2>\n<p>The conceptual representation described in <a href=\"/static/crdt-23cace273764fa85cfd75547d17231af.md\"><code class=\"language-text\">crdt.md</code></a> would be very inefficient to use directly. If we had to store an ID and ordering edges for each character and reconstruct the current text via topological sort every time we wanted to know what the current text is, Xi would be incredibly slow and would use much more memory than is necessary.</p>\n<p>Instead, we use a representation that allows all the operations we care about to be fast. We also take advantage of the typical patterns of text document usage to make the representation more memory efficient for common cases.</p>\n<p>The key optimization that shapes everything else is to avoid using IDs for characters or storing ordering edges explicitly. Instead, we represent the identity of characters implicitly by their position in the current text. But then how do we reference them in our revision history? If we use indices into the current text, they will get outdated by changes. We could rewrite all the indices in the history every time we made an edit, but that would be terribly inefficient. Instead the set of inserted characters in every revision is treated as a <em>coordinate transform</em> for the older revisions. In order to find the character referred to by an older revision you have to transform the indices it uses based on the insertions made after it. This allows us to make our history append-only, leaving the indices referring to the text at the time of the revision.</p>\n<p>That description is almost certainly too vague to be understandable at this point, but don't worry, there will be a full description with diagrams later on.</p>\n<p>Starting from the basic building blocks and proceeding towards the top level CRDT <code class=\"language-text\">Engine</code>, here are all the structures:</p>\n<h3 id=\"rope\"><a href=\"#rope\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rope</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token function\">Rope</span><span class=\"token punctuation\">(</span>Arc<span class=\"token operator\">&lt;</span>RopeBody<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Clone)]</span>\n<span class=\"token keyword\">struct</span> RopeBody <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Used for efficiently seeking to an index in the tree</span>\n    len<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Used for rebalancing</span>\n    height<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n    val<span class=\"token punctuation\">:</span> RopeVal<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> RopeVal <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Internal</span><span class=\"token punctuation\">(</span>Vec<span class=\"token operator\">&lt;</span>Rope<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> All the Rust code in this document is simplified from the actual implementation so that it still conveys the structure and memory properties of the representation but elides details not necessary to understand the CRDT. See the code or generated docs for the full definitions. For example, the real struct for <code class=\"language-text\">Rope</code> is called <code class=\"language-text\">Node&lt;N: NodeInfo&gt;</code> and is a generic structure not specific to text, that is later instantiated for text as <code class=\"language-text\">pub type Rope = Node&lt;RopeInfo&gt;</code>.</p>\n<p>When representing potentially large amounts of text, Xi avoids using <code class=\"language-text\">String</code>s and instead uses a data structure called <code class=\"language-text\">Rope</code>. This is essentially an immutable <code class=\"language-text\">String</code> except many operations that would be <code class=\"language-text\">O(n)</code> with normal strings are instead <code class=\"language-text\">O(log n)</code> or <code class=\"language-text\">O(1)</code>. Some examples of operations like this:</p>\n<ul>\n<li>Copying</li>\n<li>Extracting a substring by index</li>\n<li>Inserting one piece of text in the middle of another producing a new piece of text</li>\n<li>Deleting an interval from a piece of text, producing a new piece of text</li>\n</ul>\n<p>Behind the scenes, <code class=\"language-text\">Rope</code> is an immutable balanced tree structure using Rust's atomic reference counting smart pointer (<code class=\"language-text\">Arc</code>) to share data, so \"copying\" any sub-tree is a very fast <code class=\"language-text\">O(1)</code> operation. The leaves of the tree are chunks of text with a maximum size.</p>\n<p>An example of a <code class=\"language-text\">O(log n)</code> operation is deleting an interval of a <code class=\"language-text\">Rope</code>, which only requires creating a few new nodes that reference the sub-trees to the right and left of the deleted interval, and creating up to two new leaves if the deleted interval doesn't lie on chunk boundaries.</p>\n<p>Obviously <code class=\"language-text\">Rope</code>s will be slower and take more memory than small <code class=\"language-text\">Strings</code> but they have an asymptotic advantage when working with large documents.</p>\n<p>For a deeper look at <code class=\"language-text\">Rope</code>s see the <a href=\"rope_science_00.md\">Rope Science</a> series.</p>\n<h3 id=\"subset\"><a href=\"#subset\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> Segment <span class=\"token punctuation\">{</span>\n    len<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n    count<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> Subset <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Invariant, maintained by `SubsetBuilder`: all `Segment`s have non-zero</span>\n    <span class=\"token comment\">/// length, and no `Segment` has the same count as the one before it.</span>\n    segments<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>Segment<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Subset</code> structure in <code class=\"language-text\">multiset.rs</code> represents a multi-subset of a string, meaning that every character in the string has a count (often <code class=\"language-text\">0</code>) representing how many times it is in the <code class=\"language-text\">Subset</code>. Most of the time this structure is used to represent plain-old subsets and the counts are only ever <code class=\"language-text\">0</code> for something not in the set or <code class=\"language-text\">1</code> for a character in the set. It is primarily used to efficiently represent inserted and deleted regions of a document.</p>\n<p><strong>Note:</strong> The exact nature of the characters is not central to the CRDT algorithm. It's most convenient for indices to match the representation, so throughout this document \"characters\" are actually counting UTF-8 code units, so for example an emoji would be multiple \"characters\" in this sense.</p>\n<p>It stores this information compactly as a list of consecutive <code class=\"language-text\">Segment</code>s with a <code class=\"language-text\">length</code> and a <code class=\"language-text\">count</code>. This way a <code class=\"language-text\">Subset</code> representing 1000 consecutive characters in the middle of a string will only require 3 segments (a 0-count one at the start, a 1-count one in the middle, and another 0-count one at the end). So as <code class=\"language-text\">(len, count)</code> tuples this would look like: <code class=\"language-text\">(n, 0), (1000, 1), (m, 0)</code>.</p>\n<p>The primary reason that <code class=\"language-text\">Subset</code>s can have counts greater than <code class=\"language-text\">1</code> is to represent concurrent deletes, for example if two concurrent edits delete the same character, and one of them is undone, subtracting one of the deletes from the <code class=\"language-text\">Subset</code> of deleted characters should still leave the character deleted once. For this reason, the <code class=\"language-text\">Subset</code>s of deleted characters which are described later have counts that represent how many times each character has been deleted.</p>\n<p>Note that an \"empty\" <code class=\"language-text\">Subset</code> where all the characters have count <code class=\"language-text\">0</code> is still represented as a single segment with the length of the base string and count set to <code class=\"language-text\">0</code>. This allows functions using <code class=\"language-text\">Subset</code>s to panic if they are used with strings or other <code class=\"language-text\">Subset</code>s of the wrong length. This gives a level of dynamic checking that algorithms are using <code class=\"language-text\">Subset</code>s correctly.</p>\n<h3 id=\"delta\"><a href=\"#delta\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delta</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> DeltaElement <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Represents a range of text in the base document. Includes beginning, excludes end.</span>\n    <span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>usize<span class=\"token punctuation\">,</span> usize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>Rope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> Delta <span class=\"token punctuation\">{</span>\n    els<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>DeltaElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// The total length of the base document, used for checks in some operations</span>\n    base_len<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token function\">InsertDelta</span><span class=\"token punctuation\">(</span>Delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A <code class=\"language-text\">Delta</code> represents the difference between one string (<em>A</em>) and another (<em>B</em>). It stores this as a list of intervals copied from the <em>A</em> string and new inserted sections. All the indices of the copied intervals are non-decreasing. So a deletion is represented as a section of the <em>A</em> string which isn't copied to the <em>B</em> string, and insertions are represented as inserted sections in between copied sections. <code class=\"language-text\">Delta</code> is the data structure the text editor interface creates when the user or a plugin edits the document, these are then applied to the document by the <code class=\"language-text\">Engine::edit_rev</code> operation described later.</p>\n<p>There is also a type <code class=\"language-text\">InsertDelta</code> that is just a wrapper around a <code class=\"language-text\">Delta</code> but represents a guarantee that the <code class=\"language-text\">Delta</code> only inserts, that is, the entire <em>A</em> string is copied by the <code class=\"language-text\">Copy</code> intervals.</p>\n<h3 id=\"text-tombstones-and-the-union-string\"><a href=\"#text-tombstones-and-the-union-string\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text, tombstones and the \"union string\"</h3>\n<p>A super important part of being able to provide the properties we desire in our CRDT is that we never throw useful information away. This means that when you delete text in Xi, or undo an insert, the text doesn't actually get thrown away, just marked as deleted. You can think of this as if there is a \"union string\" that contains all the characters that have ever been inserted, with some marked as deleted.</p>\n<p>When we delete or undo, we don't touch the union string, we just change a <code class=\"language-text\">Subset</code> (<code class=\"language-text\">deletes_from_union</code>, more on that later) which marks which characters of the union string are deleted. These deleted characters are sometimes called \"tombstones\" both within Xi and the academic CRDT literature.</p>\n<p>If we wanted to go from the \"union string\" to the current text of the document, you'd delete the characters marked in <code class=\"language-text\">deletes_from_union</code> from the union string. The problem is, Xi access the current text <strong>very often</strong>, so this would be an inefficient way to actually store the text for large documents.</p>\n<p>As an optimization, we store the union string as two separate parts: <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code>. The <code class=\"language-text\">text</code> stores the current visible document contents, so it is really fast to access, and <code class=\"language-text\">tombstones</code> stores all the characters that are currently in the <code class=\"language-text\">deletes_from_union</code> set. We still store the <code class=\"language-text\">deletes_from_union</code> set to mark deleted characters. Note that the union string is still used for most indices as a coordinate space for <code class=\"language-text\">Subset</code>s like <code class=\"language-text\">deletes_from_union</code>.</p>\n<p>Here's an example of what this looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">union string:       abcdefgh\ndeletes_from_union: -+---+-+\ntext:               acdeg\ntombstones:         bfh</code></pre></div>\n<p>We can now also look at <code class=\"language-text\">deletes_from_union</code> as describing the interleaving of characters from <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">text:               a cde g\ndeletes_from_union: -+---+-+\ntombstones:          b   f h</code></pre></div>\n<p>The union string is still an important and useful concept because it makes a lot of the operations easier to implement and understand. Almost all explanations will be in terms of the union string, if you want you can largely ignore that fact that it's actually stored as two separate parts. Most operations are done in terms of the union string and then at the very end they shuffle some things around between the current <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code>.</p>\n<h3 id=\"revision\"><a href=\"#revision\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Revision</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> Revision <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// This uniquely represents the identity of this revision and it stays</span>\n    <span class=\"token comment\">/// the same even if it is rebased or merged between devices.</span>\n    rev_id<span class=\"token punctuation\">:</span> RevId<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// The largest undo group number of any edit in the history up to this</span>\n    <span class=\"token comment\">/// point. Used to optimize undo to not look further back.</span>\n    max_undo_so_far<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n    edit<span class=\"token punctuation\">:</span> Contents<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> Contents <span class=\"token punctuation\">{</span>\n    Edit <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// Used to order concurrent inserts, for example auto-indentation</span>\n        <span class=\"token comment\">/// should go before typed text.</span>\n        priority<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/// Groups related edits together so that they are undone and re-done</span>\n        <span class=\"token comment\">/// together. For example, an auto-indent insertion would be un-done</span>\n        <span class=\"token comment\">/// along with the newline that triggered it.</span>\n        undo_group<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/// The subset of the characters of the union string from after this</span>\n        <span class=\"token comment\">/// revision that were added by this revision.</span>\n        inserts<span class=\"token punctuation\">:</span> Subset<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/// The subset of the characters of the union string from after this</span>\n        <span class=\"token comment\">/// revision that were deleted by this revision.</span>\n        deletes<span class=\"token punctuation\">:</span> Subset<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    Undo <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// The set of groups toggled between undone and done.</span>\n        <span class=\"token comment\">/// Just the `symmetric_difference` (XOR) of the two sets.</span>\n        toggled_groups<span class=\"token punctuation\">:</span> BTreeSet<span class=\"token operator\">&lt;</span>usize<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// set of undo_group id's</span>\n        <span class=\"token comment\">/// Used to store a reversible difference between the deleted</span>\n        <span class=\"token comment\">/// characters before and after this operation.</span>\n        deletes_bitxor<span class=\"token punctuation\">:</span> Subset<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Revision</code>s represent a single edit to the document. Typing a character into a Xi document will create a new <code class=\"language-text\">Revision</code> with a <code class=\"language-text\">Contents::Edit</code> with an empty <code class=\"language-text\">deletes</code> subset and an <code class=\"language-text\">inserts</code> subset containing the character inserted.</p>\n<p>They can also represent more complex things like selecting multiple ranges of text using multiple cursors (which Xi supports) and then pasting. This would result in a <code class=\"language-text\">Contents::Edit</code> with an <code class=\"language-text\">inserts</code> subset containing multiple separate segments of pasted characters, and a <code class=\"language-text\">deletes</code> subset containing the multiple ranges of previous text that were replaced.</p>\n<p>Note that the <code class=\"language-text\">inserts</code> and <code class=\"language-text\">deletes</code> <code class=\"language-text\">Subset</code>s are based on the union string from after the <code class=\"language-text\">Revision</code> is applied. The fact that the union string includes deleted characters allows insertions and deletions to maintain their position easily in the face of concurrency and undo. For example, say I have the text \"ac\" and I change it to \"abc\", but then undo the first edit leaving \"b\". If I re-do the first edit, Xi needs to know that the \"b\" goes between the two deleted characters. You might be able to think of ways to do this with other coordinates, but it's much easier and less fraught when coordinates only change on insertions instead of insertions, deletions and undo.</p>\n<p>A key property of <code class=\"language-text\">Revision</code>s is that they contain all the necessary information to apply them as well as reverse them. This is important both for undo and also for some operations we'll get to later. This is why <code class=\"language-text\">Contents::undo</code> stores the set of toggled groups rather than the new set of undone groups. It's also why it stores a reversible set of changes to the deleted characters (more on those later), this could be found by replaying all of history using the new set of undo groups, but then it would be inefficient to apply and reverse (because it would be proportional to the length of history).</p>\n<h3 id=\"revid--revtoken\"><a href=\"#revid--revtoken\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RevId &#x26; RevToken</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> RevId <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.</span>\n    <span class=\"token comment\">// `session1==session2==0` is reserved for initialization which is the same on all sessions.</span>\n    <span class=\"token comment\">// A colliding session will break merge invariants and the document will start crashing Xi.</span>\n    session1<span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.</span>\n    session2<span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// There will probably never be a document with more than 4 billion edits</span>\n    <span class=\"token comment\">// in a single session.</span>\n    num<span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Valid within a session. If there's a collision the most recent matching</span>\n<span class=\"token comment\">/// Revision will be used, which means only the (small) set of concurrent edits</span>\n<span class=\"token comment\">/// could trigger incorrect behavior if they collide, so u64 is safe.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">type</span> RevToken <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">RevId</code> is used to uniquely identify the revision. The trick is offline devices have to be able to generate non-colliding IDs, which they do by generating random \"session IDs\" that become part of their revision numbers for that execution, with <code class=\"language-text\">num</code> being just an incrementing counter. The reason the IDs aren't fully random is so that eventually we can delta-compress them and the IDs will take on average 1 bit per revision instead of 128 bits. This is only necessary for the multi-device syncing case, in the single-device case the session ID is always <code class=\"language-text\">(1,0)</code>.</p>\n<p><code class=\"language-text\">RevToken</code> is used to make the API simpler, it is just the hash of a <code class=\"language-text\">RevId</code>. This makes things easy for plugins and other things that need to reference revisions.</p>\n<h3 id=\"engine\"><a href=\"#engine\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Represents the current state of a document and all of its history</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> Engine <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// The session ID used to create new `RevId`s for edits made on this device</span>\n    session<span class=\"token punctuation\">:</span> SessionId<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// The incrementing revision number counter for this session used for `RevId`s</span>\n    rev_id_counter<span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// The current contents of the document as would be displayed on screen</span>\n    text<span class=\"token punctuation\">:</span> Rope<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Storage for all the characters that have been deleted  but could</span>\n    <span class=\"token comment\">/// return if a delete is un-done or an insert is re- done.</span>\n    tombstones<span class=\"token punctuation\">:</span> Rope<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Imagine a \"union string\" that contained all the characters ever</span>\n    <span class=\"token comment\">/// inserted, including the ones that were later deleted, in the locations</span>\n    <span class=\"token comment\">/// they would be if they hadn't been deleted.</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">/// This is a `Subset` of the \"union string\" representing the characters</span>\n    <span class=\"token comment\">/// that are currently deleted, and thus in `tombstones` rather than</span>\n    <span class=\"token comment\">/// `text`. The count of a character in `deletes_from_union` represents</span>\n    <span class=\"token comment\">/// how many times it has been deleted, so if a character is deleted twice</span>\n    <span class=\"token comment\">/// concurrently it will have count `2` so that undoing one delete but not</span>\n    <span class=\"token comment\">/// the other doesn't make it re-appear.</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">/// You could construct the \"union string\" from `text`, `tombstones` and</span>\n    <span class=\"token comment\">/// `deletes_from_union` by splicing a segment of `tombstones` into `text`</span>\n    <span class=\"token comment\">/// wherever there's a non-zero-count segment in `deletes_from_union`.</span>\n    deletes_from_union<span class=\"token punctuation\">:</span> Subset<span class=\"token punctuation\">,</span>\n    undone_groups<span class=\"token punctuation\">:</span> BTreeSet<span class=\"token operator\">&lt;</span>usize<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// set of undo_group id's</span>\n    <span class=\"token comment\">/// The revision history of the document</span>\n    revs<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>Revision<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// the session ID component of a `RevId`</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">type</span> SessionId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">,</span> u32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Engine</code> is the top-level container of text state for the CRDT. It stores the current state of the document and all the <code class=\"language-text\">Revision</code>s that lead up to it. This allows operations that require knowledge of history to apply <code class=\"language-text\">Revision</code>s in reverse from the current state to find the state at a point in the past, without having to store the state at every point in history. Be sure to read the code in this case, all the fields are described by doc comments.</p>\n<p><strong>SUPER IMPORTANT INSIGHT:</strong> Because the union string preserves the textual ordering of inserted characters, indices in the union string only depend on the set of inserted characters and not what order they were added in the history. This means that the correct representation of a <code class=\"language-text\">Revision</code> for a given edit <em>doesn't depend on the order</em> of <code class=\"language-text\">Revision</code>s before it in the history, only what <em>set</em> of <code class=\"language-text\">Revision</code>s is before it.</p>\n<h3 id=\"example-history\"><a href=\"#example-history\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example History</h3>\n<p>Bringing it all together, here's a sketch of how a simple editing scenario would be represented this way.</p>\n<p><img src=\"img/representation-overview.png\" alt=\"Representation example\"></p>\n<p>Shown below is a longer history of <code class=\"language-text\">Edit</code> <code class=\"language-text\">Revision</code>s. At each point, the <code class=\"language-text\">inserts</code> and <code class=\"language-text\">deletes</code> <code class=\"language-text\">Subset</code>s of the <code class=\"language-text\">Revision</code> that was just added are shown. Below that is what the contents of <code class=\"language-text\">Engine</code> would be immediately after that <code class=\"language-text\">Revision</code> was added to it.</p>\n<p>Also included is a \"Concepts\" section that includes things that aren't actually stored but are useful for understanding the representation. This includes the \"union\" string that all indices are based on. It also includes <code class=\"language-text\">back_computed_deletions_from_6_union</code>, which is like <code class=\"language-text\">deletes_from_union</code> except instead of being based on the union at the time of the edit, it is based on the union of <code class=\"language-text\">Revision</code> 6. This shows that since we never throw away information, we can represent the <code class=\"language-text\">text</code> at any past <code class=\"language-text\">Revision</code> as a set of deletions from the union string of any later revision.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">()  Revision: before any revisions are made\n    Engine:   text=&quot;&quot; tombstones=&quot;&quot; deletes_from_union={}\n    Concepts: union=&quot;&quot; back_computed_deletions_from_6_union={0,1,2,3,4,5}\n(1) Revision: inserts={0, 1, 2} deletes={}\n    Engine:   text=&quot;123&quot; tombstones=&quot;&quot; deletes_from_union={}\n    Concepts: union=&quot;123&quot; back_computed_deletions_from_6_union={0,1,2}\n(2) Revision: inserts={} deletes={0, 1, 2}\n    Engine:   text=&quot;&quot; tombstones=&quot;123&quot; deletes_from_union={0,1,2}\n    Concepts: union=&quot;123&quot; back_computed_deletions_from_6_union={0,1,2,3,4,5}\n(3) Revision: inserts={0} deletes={}\n    Engine:   text=&quot;a&quot; tombstones=&quot;123&quot; deletes_from_union={1,2,3}\n    Concepts: union=&quot;a123&quot; back_computed_deletions_from_6_union={1,2,3,4,5}\n(4) Revision: inserts={1} deletes={}\n    Engine:   text=&quot;ab&quot; tombstones=&quot;123&quot; deletes_from_union={2,3,4}\n    Concepts: union=&quot;ab123&quot; back_computed_deletions_from_6_union={1,3,4,5}\n(5) Revision: inserts={1} deletes={}\n    Engine:   text=&quot;axb&quot; tombstones=&quot;123&quot; deletes_from_union={3,4,5}\n    Concepts: union=&quot;axb123&quot; back_computed_deletions_from_6_union={3,4,5}\n(6) Revision: inserts={} deletes={1}\n    Engine:   text=&quot;ab&quot; tombstones=&quot;x123&quot; deletes_from_union={1,3,4,5}\n    Concepts: union=&quot;axb123&quot;</code></pre></div>\n<h2 id=\"operations\"><a href=\"#operations\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operations</h2>\n<p>Now that you know what we have to work with, let's go over the operations that <code class=\"language-text\">Engine</code> supports. Each of these operations relies on a bunch of different shared helpers, as we go from the simplest operations to the most complex, we'll gradually build up the set of helpers we use.</p>\n<p>After describing how each operation or helper works there'll often be a code block with the actual function, it isn't necessary to understand the code and it may have complications that aren't mentioned, so feel free to skip them, they're there if you want to confirm or enhance your understanding.</p>\n<h3 id=\"subset-helpers\"><a href=\"#subset-helpers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset helpers</h3>\n<p><code class=\"language-text\">Subset</code> has a number of operations that produce new <code class=\"language-text\">Subset</code>s, these form the core of most work the CRDT operations do. It's better to explain them together near the start since they're used everywhere:</p>\n<h4 id=\"subsetunion\"><a href=\"#subsetunion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset::union</h4>\n<p>Takes two <code class=\"language-text\">Subset</code>s and produces a new <code class=\"language-text\">Subset</code> of the same string where each character has the sum of the counts it has in each input. When treating a <code class=\"language-text\">Subset</code> as a normal set, this is just the union.</p>\n<h4 id=\"subsettransform_expand\"><a href=\"#subsettransform_expand\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset::transform_expand</h4>\n<p><code class=\"language-text\">Subset::transform_expand</code> takes a <code class=\"language-text\">Subset</code> and another \"transform\" <code class=\"language-text\">Subset</code> and transforms the first <code class=\"language-text\">Subset</code> through the coordinate transform represented by the \"transform\". Now what does this mean:</p>\n<p><code class=\"language-text\">Revision</code>s are never modified, and their <code class=\"language-text\">Edit</code>s always refer to the union string that existed when they were created. For operations on multiple <code class=\"language-text\">Revision</code>s, we have to be able to map coordinates in one's union string to coordinates in another's. We can deal with this by treating <code class=\"language-text\">Subset</code>s of inserted characters as coordinate transforms. Since the only difference to the union string is the inserted characters, if we can map the coordinates of a <code class=\"language-text\">Subset</code> from one union string to another, we can work with edits from multiple <code class=\"language-text\">Revision</code>s together.</p>\n<p>We can do this by \"expanding\" the indices in a <code class=\"language-text\">Subset</code> after each insert by the size of that insert, where the inserted characters are the \"transform\". Conceptually if a <code class=\"language-text\">Subset</code> represents the set of characters in a string that were inserted by an edit, then it can be used as a transform from the coordinate space before that edit to after that edit by mapping a <code class=\"language-text\">Subset</code> of the string before the insertion onto the 0-count regions of the transform <code class=\"language-text\">Subset</code>.</p>\n<p>The actual procedure works by iterating over the segments of the transform:</p>\n<ul>\n<li>When it encounters a 0-count segment it keeps putting (potentially partial) segments from <code class=\"language-text\">self</code> into the output until it fills its size.</li>\n<li>When it encounters a non-0-count transform segment it outputs a 0-count segment of the same size.</li>\n</ul>\n<p>The <code class=\"language-text\">SubsetBuilder</code> used for the output automatically merges consecutive segments that have the same count. See the diagram below for how this plays out:</p>\n<p><img src=\"img/trans-expand-1.png\" alt=\"transform_expand workings\"></p>\n<p>One example of how this can be used is to find the characters that were inserted by a past <code class=\"language-text\">Revision</code> in the coordinates of the current union string instead of the past one:</p>\n<p><img src=\"img/trans-expand-2.png\" alt=\"transform_expand usage\"></p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Map the contents of `self` into the 0-regions of `other`.</span>\n<span class=\"token comment\">/// Precondition: `self.count(CountMatcher::All) == other.count(CountMatcher::Zero)`</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">,</span> union<span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Subset <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sb <span class=\"token operator\">=</span> SubsetBuilder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> seg_iter <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cur_seg <span class=\"token operator\">=</span> Segment <span class=\"token punctuation\">{</span>len<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> oseg <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">.</span>segments <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> oseg<span class=\"token punctuation\">.</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">push_segment</span><span class=\"token punctuation\">(</span>oseg<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> union <span class=\"token punctuation\">{</span> oseg<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// fill 0-region with segments from self.</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> to_be_consumed <span class=\"token operator\">=</span> oseg<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> to_be_consumed <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> cur_seg<span class=\"token punctuation\">.</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                    cur_seg <span class=\"token operator\">=</span> seg_iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"self must cover all 0-regions of other\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// consume as much of the segment as possible and necessary</span>\n                <span class=\"token keyword\">let</span> to_consume <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>cur_seg<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span>to_be_consumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">push_segment</span><span class=\"token punctuation\">(</span>to_consume<span class=\"token punctuation\">,</span>cur_seg<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                to_be_consumed <span class=\"token operator\">-=</span> to_consume<span class=\"token punctuation\">;</span>\n                cur_seg<span class=\"token punctuation\">.</span>len <span class=\"token operator\">-=</span> to_consume<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span>cur_seg<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"the 0-regions of other must be the size of self\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span>seg_iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the 0-regions of other must be the size of self\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sb<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Transform through coordinate transform represented by other.</span>\n<span class=\"token comment\">/// The equation satisfied is as follows:</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// s1 = other.delete_from_string(s0)</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// s2 = self.delete_from_string(s1)</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// element in self.transform_expand(other).delete_from_string(s0) if (not in s1) or in s2</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Subset <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"subsettransform_union\"><a href=\"#subsettransform_union\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset::transform_union</h4>\n<p>Like <code class=\"language-text\">transform_expand</code> except it preserves the non-zero segments of the transform instead of mapping them to 0-segments. This is the same as <code class=\"language-text\">transform_expand</code>ing and then taking the <code class=\"language-text\">union</code> with the transform, but more efficient. These two operations are frequently chained so a shortcut is useful, for example to transform a set of deletions to the coordinate space including some new characters, while also adding those insertions to the deleted set. So:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">a<span class=\"token punctuation\">.</span><span class=\"token function\">transform_union</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"subsettransform_shrink\"><a href=\"#subsettransform_shrink\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset::transform_shrink</h4>\n<p>The reverse of <code class=\"language-text\">Subset::transform_expand</code>. It takes a <code class=\"language-text\">Subset</code> and a transform <code class=\"language-text\">Subset</code> that are based on the same string and removes sections of the former that align with non-zero segments of the latter. In most uses these sections of the former always have count 0 (otherwise this transform would lose information), but there are some things like garbage collection that intentionally use this to discard information.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Transform subset through other coordinate transform, shrinking.</span>\n<span class=\"token comment\">/// The following equation is satisfied:</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// C = A.transform_expand(B)</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// B.transform_shrink(C).delete_from_string(C.delete_from_string(s)) =</span>\n<span class=\"token comment\">///   A.delete_from_string(B.delete_from_string(s))</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">transform_shrink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Subset <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sb <span class=\"token operator\">=</span> SubsetBuilder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// discard ZipSegments where the shrinking set has positive count</span>\n    <span class=\"token keyword\">for</span> zseg <span class=\"token keyword\">in</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO: should this actually do something like subtract counts?</span>\n        <span class=\"token keyword\">if</span> zseg<span class=\"token punctuation\">.</span>b_count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">push_segment</span><span class=\"token punctuation\">(</span>zseg<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span> zseg<span class=\"token punctuation\">.</span>a_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    sb<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"engineget_rev\"><a href=\"#engineget_rev\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::get_rev</h3>\n<p>This operation is used in the plugin API and is probably the simplest operation, but it still relies on a lot of sub-steps that are shared with other operations.</p>\n<p>The idea behind how it works is that we already have all the characters we need in the <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> <code class=\"language-text\">Rope</code>s we store, but some of the characters from the past revision might have been deleted, and some new characters might have been inserted that weren't in the past revision. We need to find a way to delete the newer insertions from <code class=\"language-text\">text</code> and insert the things that weren't deleted at the past point from where they are in <code class=\"language-text\">tombstones</code>.</p>\n<p>The way we describe the current state of <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> relative to the \"union string\" is with <code class=\"language-text\">deletes_from_union</code> (see <a href=\"#engine\">Engine</a>), so what if we could find a similar <code class=\"language-text\">old_deletes_from_cur_union</code> that represented what the old revision's text looked like relative to the current union string. This would be the same as our current <code class=\"language-text\">deletes_from_union</code> except characters inserted after the old revision would be marked deleted and newer deletes would be un-marked. The function that finds this is <code class=\"language-text\">Engine::deletes_from_cur_union_for_index</code>.</p>\n<p>Once we have this <code class=\"language-text\">old_deletes_from_cur_union</code> and a new <code class=\"language-text\">deletes_from_union</code>, we need a way to take our current <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> and get a <code class=\"language-text\">Rope</code> of what the <code class=\"language-text\">text</code> would have looked like at that old revision. We can do this by performing inserts and deletes on the <code class=\"language-text\">text</code> <code class=\"language-text\">Rope</code> based on the differences between the old and new deletions. We already have a way of describing inserts and deletes (a <code class=\"language-text\">Delta</code>), and we can create one using a helper called <code class=\"language-text\">Delta::synthesize</code>.</p>\n<p>Then we just have to apply the <code class=\"language-text\">Delta</code> we synthesized to the current <code class=\"language-text\">text</code>, returning the resulting old text.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Get text of a given revision, if it can be found.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">get_rev</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">:</span> RevToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Option<span class=\"token operator\">&lt;</span>Rope<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find_rev_token</span><span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>rev_index<span class=\"token operator\">|</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev_content_for_index</span><span class=\"token punctuation\">(</span>rev_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Get text of a given revision, if it can be found.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">rev_content_for_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> rev_index<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Rope <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> old_deletes_from_union <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">deletes_from_cur_union_for_index</span><span class=\"token punctuation\">(</span>rev_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> delta <span class=\"token operator\">=</span> Delta<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">synthesize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>old_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    delta<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"enginedeletesfromcurunionfor_index\"><a href=\"#enginedeletesfromcurunionfor_index\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::deletes<em>from</em>cur<em>union</em>for_index</h4>\n<p>If you look back at the <a href=\"#example-history\">example history scenario</a>, you'll see <code class=\"language-text\">back_computed_deletions_from_6_union</code>, which shows that for any past <code class=\"language-text\">Revision</code> we can find a set of deletions from the current union string that result in the past text. This helper is what computes deletion sets like <a href=\"#example-history\"><code class=\"language-text\">back_computed_deletions_from_6_union</code></a>.</p>\n<p>We can find an <code class=\"language-text\">old_deletes_from_cur_union</code> by taking our current <code class=\"language-text\">deletes_from_union</code> and walking backwards through our list of <code class=\"language-text\">Revision</code>s undoing the changes they have made since the old revision.</p>\n<p>There's a problem with this though, the <code class=\"language-text\">inserts</code> and <code class=\"language-text\">deletes</code> subsets for a <code class=\"language-text\">Revision</code> use indices in the coordinate space of the union string at the time the <code class=\"language-text\">Revision</code> was created, which may be smaller than our current union string.</p>\n<p>We could keep track of the transform and account for it, but it's easier to use a helper we need anyway elsewhere that computes what the <code class=\"language-text\">deletes_from_union</code> actually would have been at that previous point in time, that is, relative to the old union string not the current one like we want. This helper is called <code class=\"language-text\">Engine::deletes_from_union_for_index</code> and it performs the work of un-deleting and un-undoing everything after the old revision.</p>\n<p>Then we can take this <code class=\"language-text\">old_deletes_from_union</code> and <code class=\"language-text\">Subset::transform_union</code> it through the <code class=\"language-text\">inserts</code> since that old revision to get the <code class=\"language-text\">old_deletes_from_cur_union</code> we wanted. This puts it in the right coordinate space and the <code class=\"language-text\">union</code> part of <code class=\"language-text\">transform_union</code> makes sure that new inserts are considered as deleted (so not present) in <code class=\"language-text\">old_deletes_from_cur_union</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Get the Subset to delete from the current union string in order to obtain a revision's content</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">deletes_from_cur_union_for_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> rev_index<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Cow<span class=\"token operator\">&lt;</span>Subset<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> deletes_from_union <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">deletes_from_union_for_index</span><span class=\"token punctuation\">(</span>rev_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> rev <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">[</span>rev_index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> Edit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">ref</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> rev<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>inserts<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                deletes_from_union <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">transform_union</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    deletes_from_union\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"enginedeletesfromunionforindex\"><a href=\"#enginedeletesfromunionforindex\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::deletes<em>from</em>union<em>for</em>index</h4>\n<p>This function uses the property that each <code class=\"language-text\">Revision</code> contains the information necessary to reverse it, in order to work backwards from the current state of <code class=\"language-text\">deletes_from_union</code> to the past state. For every <code class=\"language-text\">Edit</code> revision it <code class=\"language-text\">subtract</code>s the <code class=\"language-text\">deletes</code> (meaning if something was deleted twice, this will only reverse one), but only if they weren't undone, and then uses <code class=\"language-text\">transform_shrink</code> to reverse the coordinate transform of the <code class=\"language-text\">inserts</code> so that the indices in the intermediate <code class=\"language-text\">old_deletes_from_union</code> refer to the previous union string. <code class=\"language-text\">Undo</code> edits store the symmetric differences of the <code class=\"language-text\">deletes_from_union</code> and the currently undone groups, so those are just reversed.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Find what the `deletes_from_union` field in Engine would have been at the time</span>\n<span class=\"token comment\">/// of a certain `rev_index`. In other words, the deletes from the union string at that time.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">deletes_from_union_for_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> rev_index<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Cow<span class=\"token operator\">&lt;</span>Subset<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">deletes_from_union_before_index</span><span class=\"token punctuation\">(</span>rev_index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Garbage collection means undo can sometimes need to replay the very first</span>\n<span class=\"token comment\">/// revision, and so needs a way to get the deletion set before then.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">deletes_from_union_before_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> rev_index<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span> invert_undos<span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Cow<span class=\"token operator\">&lt;</span>Subset<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> deletes_from_union <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Borrowed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> undone_groups <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Borrowed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>undone_groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// invert the changes to deletes_from_union starting in the present and working backwards</span>\n    <span class=\"token keyword\">for</span> rev <span class=\"token keyword\">in</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">[</span>rev_index<span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        deletes_from_union <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> rev<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            Edit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">ref</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> deletes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> undo_group<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> undone_groups<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>undo_group<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// no need to un-delete undone inserts since we'll just shrink them out</span>\n                    Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">transform_shrink</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> un_deleted <span class=\"token operator\">=</span> deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>deletes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span>un_deleted<span class=\"token punctuation\">.</span><span class=\"token function\">transform_shrink</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            Undo <span class=\"token punctuation\">{</span> <span class=\"token keyword\">ref</span> toggled_groups<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> deletes_bitxor <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> invert_undos <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> new_undone <span class=\"token operator\">=</span> undone_groups<span class=\"token punctuation\">.</span><span class=\"token function\">symmetric_difference</span><span class=\"token punctuation\">(</span>toggled_groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    undone_groups <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span>new_undone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">bitxor</span><span class=\"token punctuation\">(</span>deletes_bitxor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    deletes_from_union\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    deletes_from_union\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"deltasynthesize\"><a href=\"#deltasynthesize\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delta::synthesize</h4>\n<p>This function is just a big hand-written triply-nested looping algorithm that loops over a <code class=\"language-text\">from_dels</code> and <code class=\"language-text\">to_dels</code> subset and uses a <code class=\"language-text\">tombstones</code> to construct a <code class=\"language-text\">Delta</code>. It's not particularly interesting, easy or worthwhile to understand.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Synthesize a delta from a \"union string\" and two subsets: an old set</span>\n<span class=\"token comment\">/// of deletions and a new set of deletions from the union. The Delta is</span>\n<span class=\"token comment\">/// from text to text, not union to union; anything in both subsets will</span>\n<span class=\"token comment\">/// be assumed to be missing from the Delta base and the new text. You can</span>\n<span class=\"token comment\">/// also think of these as a set of insertions and one of deletions, with</span>\n<span class=\"token comment\">/// overlap doing nothing. This is basically the inverse of `factor`.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Since only the deleted portions of the union string are necessary,</span>\n<span class=\"token comment\">/// instead of requiring a union string the function takes a `tombstones`</span>\n<span class=\"token comment\">/// rope which contains the deleted portions of the union string. The</span>\n<span class=\"token comment\">/// `from_dels` subset must be the interleaving of `tombstones` into the</span>\n<span class=\"token comment\">/// union string.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">synthesize</span><span class=\"token punctuation\">(</span>tombstones<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Node<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> from_dels<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">,</span> to_dels<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Delta<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"enginedeltarevhead\"><a href=\"#enginedeltarevhead\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::delta<em>rev</em>head</h3>\n<p>This operation is similar to <code class=\"language-text\">Engine::get_head</code> except it returns a <code class=\"language-text\">Delta</code> from the text at a specified revision to the current head text. This is useful for things like updating the position of cursors and rich text spans when edits are made.</p>\n<p>Like <code class=\"language-text\">Engine::get_head</code> it starts by calling <code class=\"language-text\">Engine::deletes_from_cur_union_for_index</code> to get a <code class=\"language-text\">Subset</code> describing the state of the text at the old revision relative to the current union string. Now we can just use <code class=\"language-text\">Delta::synthesize</code> to create a <code class=\"language-text\">Delta</code> from the old to the new <code class=\"language-text\">deletes_from_union</code>. The problem is, <code class=\"language-text\">Delta::synthesize</code> expects the tombstones <code class=\"language-text\">Rope</code> you give it to correspond to <code class=\"language-text\">from_dels</code>, but we have one for <code class=\"language-text\">to_dels</code>. To fix this, we can use a helper called <code class=\"language-text\">shuffle_tombstones</code> to move characters in and out of the tombstones to get an <code class=\"language-text\">old_tombstones</code> corresponding to <code class=\"language-text\">from_dels</code>.</p>\n<h4 id=\"shuffle_tombstones\"><a href=\"#shuffle_tombstones\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shuffle_tombstones</h4>\n<p>Constructing a <code class=\"language-text\">tombstones</code> to go with an older <code class=\"language-text\">deletes_from_union</code> given the current <code class=\"language-text\">text</code>, <code class=\"language-text\">tombstones</code> and <code class=\"language-text\">deletes_from_union</code> may involve moving characters from <code class=\"language-text\">text</code> to the old <code class=\"language-text\">tombstones</code>, and removing characters from the <code class=\"language-text\">tombstones</code> that weren't deleted at the time. We can describe the necessary changes using a <code class=\"language-text\">Delta</code>, but how do we create it?</p>\n<p>We can note that since the 0-segments of <code class=\"language-text\">deletes_from_union</code> correspond to characters in <code class=\"language-text\">text</code> and the non-zero segments correspond to characters in <code class=\"language-text\">tombstones</code>, if we take the complement (0 becomes 1, non-zero becomes 0) of <code class=\"language-text\">deletes_from_union</code> we can use helpers designed for use with tombstones on <code class=\"language-text\">text</code> and vice-versa. So we can use <code class=\"language-text\">Delta::synthesize</code> with the <code class=\"language-text\">text</code> (where you would normally put the tombstones) and the complement of the old and new <code class=\"language-text\">deletes_from_union</code> to create the required <code class=\"language-text\">Delta</code> of the <code class=\"language-text\">tombstones</code> when it normally creates deltas of <code class=\"language-text\">text</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">shuffle_tombstones</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Rope<span class=\"token punctuation\">,</span> tombstones<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Rope<span class=\"token punctuation\">,</span>\n        old_deletes_from_union<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">,</span> new_deletes_from_union<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Rope <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,</span>\n    <span class=\"token comment\">// allowing us to use the same method to insert the text into the tombstones.</span>\n    <span class=\"token keyword\">let</span> inverse_tombstones_map <span class=\"token operator\">=</span> old_deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">complement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> move_delta <span class=\"token operator\">=</span> Delta<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">synthesize</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>inverse_tombstones_map<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>new_deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">complement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    move_delta<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>tombstones<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"engineedit_rev\"><a href=\"#engineedit_rev\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::edit_rev</h3>\n<p>This is the mini-CRDT function, it enables concurrent edits, but each peer can only have one in flight at a time and all edits must go through a central server. The form this takes is that you can submit <code class=\"language-text\">Delta</code>s to the <code class=\"language-text\">Engine</code> that are based on a revision that is not the current head. For example a plugin can get the text at a revision, make an edit and submit it along with the <code class=\"language-text\">RevToken</code> it is based on, but by that time there might have been new edits. That's not a problem since <code class=\"language-text\">edit_rev</code> can accept an arbitrary past <code class=\"language-text\">base_rev</code>.</p>\n<p>This operation has a number of stages:</p>\n<ol>\n<li>\n<p>Use the <code class=\"language-text\">Delta::factor</code> helper to split the given <code class=\"language-text\">delta</code> into <code class=\"language-text\">ins_delta</code> and <code class=\"language-text\">deletes</code>. This helper returns an <code class=\"language-text\">InsertDelta</code> containing only the inserts and a <code class=\"language-text\">Subset</code> based on the text (before the inserts) containing the deleted characters. When you see \"delta\" from now on, it refers to both pieces.</p>\n</li>\n<li>\n<p>Use <code class=\"language-text\">Engine::deletes_from_union_for_index</code> to work backwards from the present to find the <code class=\"language-text\">deletes_from_union</code> at the time of the base revision: <code class=\"language-text\">deletes_at_rev</code>.</p>\n</li>\n<li>\n<p>Transform the delta to be based on the union string at the time of <code class=\"language-text\">base_rev</code> rather than the <code class=\"language-text\">text</code> at the time of <code class=\"language-text\">base_rev</code>. This makes later transformations easier.</p>\n<ul>\n<li>\n<p>The <code class=\"language-text\">deletes</code> are transformed using <code class=\"language-text\">Subset::transform_expand</code> to expand the indices to include the characters that weren't in the text the <code class=\"language-text\">deletes</code> was based on.</p>\n</li>\n<li>\n<p><code class=\"language-text\">ins_delta</code> is transformed using the similar <code class=\"language-text\">InsertDelta::transform_expand</code> helper. The thing is, with inserts it is ambigous if deleted characters between the same two characters in <code class=\"language-text\">text</code> should be placed before or after characters inserted in the same place.</p>\n<p>This comes into play with arbitrary undo, where if we have \"abc\", we delete \"b\", and then insert to get \"azc\", then undo the deletion of \"b\", should we get \"abzc\" or \"azbc\"? We decided to put the inserts after the deletes, so we would get \"abzc\", but it's not important.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Transform the delta to be based on the current head revision's union string instead of <code class=\"language-text\">base_rev</code>'s union string.</p>\n<ul>\n<li>This is done by looping over every <code class=\"language-text\">Edit</code> <code class=\"language-text\">Revision</code> since <code class=\"language-text\">base_rev</code> and <code class=\"language-text\">transform_expand</code>-ing both the <code class=\"language-text\">ins_delta</code> and <code class=\"language-text\">deletes</code> by the inserted characters.</li>\n<li>But again we have the problem of whether we put the <code class=\"language-text\">ins_delta</code> inserts before or after inserts in the same place since then. For this we use the <code class=\"language-text\">priority</code> field of <code class=\"language-text\">Revision</code>. The <code class=\"language-text\">priority</code> of the incoming edit we're transforming is compared with the <code class=\"language-text\">priority</code> of the inserts we're transforming it by, and they're ordered in ascending order of priority.</li>\n<li>Each concurrent plugin has a different <code class=\"language-text\">priority</code> and they are useful for expressing what we expect concurrent edits to do. For example inserted auto-indentation should come before new user edits, but matched brackets should come after concurrent user edits, we can set the <code class=\"language-text\">priority</code> of the plugins to get this behavior. In the case of concurrent edits by the same plugin on different synced devices we break ties by session ID.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Subset::transform_expand</code> the <code class=\"language-text\">deletes</code> to apply to the head union string after <code class=\"language-text\">ins_delta</code> is applied instead of before. This matches the meaning of <code class=\"language-text\">inserts</code> and <code class=\"language-text\">deletes</code> in <code class=\"language-text\">Revision</code>, whereas <code class=\"language-text\">Delta::factor</code> gives them to us based on the same string. We <code class=\"language-text\">transform_expand</code> a <code class=\"language-text\">Subset</code> by an <code class=\"language-text\">InsertDelta</code> by first using the <code class=\"language-text\">InsertDelta::inserted_subset</code> helper to get a <code class=\"language-text\">Subset</code> of the post-insert string designating which characters were inserted.</p>\n</li>\n<li>\n<p>Transform the <code class=\"language-text\">ins_delta</code> to be based on the head <code class=\"language-text\">text</code> instead of the union string. Now that we've done all the transformation, we can commit it, and since inserts can only affect the <code class=\"language-text\">text</code> we can use <code class=\"language-text\">Subset::transform_shrink</code> and know that only <code class=\"language-text\">Copy</code> regions of the <code class=\"language-text\">InsertDelta</code> will be collapsed so that the indices of inserted segments can be applied to <code class=\"language-text\">text</code>.</p>\n</li>\n<li>\n<p>Apply the <code class=\"language-text\">ins_delta</code> to <code class=\"language-text\">text</code> using <code class=\"language-text\">Delta::apply</code> and also <code class=\"language-text\">transform_expand</code> <code class=\"language-text\">deletes_from_union</code> to include the newly inserted characters.</p>\n</li>\n<li>\n<p>Now that we've applied the inserts, we just need to apply the deletions. But wait! What if the undo group of this edit was undone between <code class=\"language-text\">base_rev</code> and now? The edit might already be undone, in which case the <code class=\"language-text\">deletes</code> shouldn't apply and the inserted characters should be deleted.</p>\n<ol>\n<li>We solve this by checking if our undo group is currently undone and if it is we set <code class=\"language-text\">to_delete</code> to the inserted characters, and otherwise set it to <code class=\"language-text\">deletes</code>.</li>\n<li>Then we compute a new <code class=\"language-text\">deletes_from_union</code> by using <code class=\"language-text\">Subset::union</code> to delete the characters in <code class=\"language-text\">to_delete</code>.</li>\n</ol>\n</li>\n<li>\n<p>We use a helper called <code class=\"language-text\">shuffle</code> which is like (and uses) <code class=\"language-text\">shuffle_tombstones</code> but it updates both the <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> from corresponding to an old <code class=\"language-text\">deletes_from_union</code> to a new one. It \"shuffles\" characters between <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> as necessary so that their new state corresponds to the new <code class=\"language-text\">deletes_from_union</code>.</p>\n</li>\n</ol>\n<p>And that's it, after that we just package up the inserted and deleted characters into a <code class=\"language-text\">Revision</code> and add it to the list of <code class=\"language-text\">revs</code> in <code class=\"language-text\">Engine</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Returns a tuple of a new `Revision` representing the edit based on the</span>\n<span class=\"token comment\">/// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">mk_new_rev</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> new_priority<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n        base_rev<span class=\"token punctuation\">:</span> RevToken<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">:</span> Delta<span class=\"token operator\">&lt;</span>RopeInfo<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span>Revision<span class=\"token punctuation\">,</span> Rope<span class=\"token punctuation\">,</span> Rope<span class=\"token punctuation\">,</span> Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> ix <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find_rev_token</span><span class=\"token punctuation\">(</span>base_rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base revision not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1. split</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>ins_delta<span class=\"token punctuation\">,</span> deletes<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> delta<span class=\"token punctuation\">.</span><span class=\"token function\">factor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2. Work backwards to find the old deletes_from_union</span>\n    <span class=\"token keyword\">let</span> deletes_at_rev <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">deletes_from_union_for_index</span><span class=\"token punctuation\">(</span>ix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3. rebase delta to be on the base_rev union instead of the text</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> union_ins_delta <span class=\"token operator\">=</span> ins_delta<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>deletes_at_rev<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> new_deletes <span class=\"token operator\">=</span> deletes<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>deletes_at_rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4. rebase the delta to be on the head union instead of the base_rev union</span>\n    <span class=\"token keyword\">let</span> new_full_priority <span class=\"token operator\">=</span> FullPriority <span class=\"token punctuation\">{</span> priority<span class=\"token punctuation\">:</span> new_priority<span class=\"token punctuation\">,</span> session_id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>session <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">[</span>ix <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> Edit <span class=\"token punctuation\">{</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>inserts<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> full_priority <span class=\"token operator\">=</span> FullPriority <span class=\"token punctuation\">{</span> priority<span class=\"token punctuation\">,</span> session_id<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">.</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> after <span class=\"token operator\">=</span> new_full_priority <span class=\"token operator\">>=</span> full_priority<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// should never be ==</span>\n                union_ins_delta <span class=\"token operator\">=</span> union_ins_delta<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                new_deletes <span class=\"token operator\">=</span> new_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 5. rebase the deletion to be after the inserts instead of directly on the head union</span>\n    <span class=\"token keyword\">let</span> new_inserts <span class=\"token operator\">=</span> union_ins_delta<span class=\"token punctuation\">.</span><span class=\"token function\">inserted_subset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>new_inserts<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        new_deletes <span class=\"token operator\">=</span> new_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>new_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 6. rebase insertions on text</span>\n    <span class=\"token keyword\">let</span> cur_deletes_from_union <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> text_ins_delta <span class=\"token operator\">=</span> union_ins_delta<span class=\"token punctuation\">.</span><span class=\"token function\">transform_shrink</span><span class=\"token punctuation\">(</span>cur_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 7. apply inserts and rebase deletes_from_union</span>\n    <span class=\"token keyword\">let</span> text_with_inserts <span class=\"token operator\">=</span> text_ins_delta<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> rebased_deletes_from_union <span class=\"token operator\">=</span> cur_deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>new_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 8. is the new edit in an undo group that was already undone due to concurrency?</span>\n    <span class=\"token keyword\">let</span> undone <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>undone_groups<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>undo_group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> new_deletes_from_union <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> to_delete <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> undone <span class=\"token punctuation\">{</span> <span class=\"token operator\">&amp;</span>new_inserts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">&amp;</span>new_deletes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        rebased_deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>to_delete<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 9. move deleted or undone-inserted things from text to tombstones</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">,</span> new_tombstones<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>text_with_inserts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span>rebased_deletes_from_union<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>new_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> head_rev <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span>Revision <span class=\"token punctuation\">{</span>\n        rev_id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">next_rev_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        max_undo_so_far<span class=\"token punctuation\">:</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cmp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>undo_group<span class=\"token punctuation\">,</span> head_rev<span class=\"token punctuation\">.</span>max_undo_so_far<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        edit<span class=\"token punctuation\">:</span> Edit <span class=\"token punctuation\">{</span>\n            priority<span class=\"token punctuation\">:</span> new_priority<span class=\"token punctuation\">,</span>\n            undo_group<span class=\"token punctuation\">:</span> undo_group<span class=\"token punctuation\">,</span>\n            inserts<span class=\"token punctuation\">:</span> new_inserts<span class=\"token punctuation\">,</span>\n            deletes<span class=\"token punctuation\">:</span> new_deletes<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> new_text<span class=\"token punctuation\">,</span> new_tombstones<span class=\"token punctuation\">,</span> new_deletes_from_union<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TODO: have `base_rev` be an index so that it can be used maximally efficiently with the</span>\n<span class=\"token comment\">// head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">edit_rev</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n        base_rev<span class=\"token punctuation\">:</span> RevToken<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">:</span> Delta<span class=\"token operator\">&lt;</span>RopeInfo<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>new_rev<span class=\"token punctuation\">,</span> new_text<span class=\"token punctuation\">,</span> new_tombstones<span class=\"token punctuation\">,</span> new_deletes_from_union<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">mk_new_rev</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span> base_rev<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>rev_id_counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>new_rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones <span class=\"token operator\">=</span> new_tombstones<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union <span class=\"token operator\">=</span> new_deletes_from_union<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"insertdeltatransform_expand\"><a href=\"#insertdeltatransform_expand\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InsertDelta::transform_expand</h4>\n<p>This is another big function with lots of nested loops. Unlike <code class=\"language-text\">Subset::transform_expand</code> it takes a boolean parameter <code class=\"language-text\">after</code> that resolves the ambiguity of whether inserts should go before or after the characters being transformed over.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Do a coordinate transformation on an insert-only delta. The `after` parameter</span>\n<span class=\"token comment\">/// controls whether the insertions in `self` come after those specific in the</span>\n<span class=\"token comment\">/// coordinate transform.</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> xform<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> InsertDelta<span class=\"token operator\">&lt;</span>N<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"shuffle\"><a href=\"#shuffle\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shuffle</h4>\n<p>This helper is used in many different operations that use the pattern of computing how <code class=\"language-text\">deletes_from_union</code> should change and then updating <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> to reflect that new state.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.</span>\n<span class=\"token comment\">/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Rope<span class=\"token punctuation\">,</span> tombstones<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Rope<span class=\"token punctuation\">,</span>\n        old_deletes_from_union<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">,</span> new_deletes_from_union<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span>Rope<span class=\"token punctuation\">,</span>Rope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Delta that deletes the right bits from the text</span>\n    <span class=\"token keyword\">let</span> del_delta <span class=\"token operator\">=</span> Delta<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">synthesize</span><span class=\"token punctuation\">(</span>tombstones<span class=\"token punctuation\">,</span> old_deletes_from_union<span class=\"token punctuation\">,</span> new_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> new_text <span class=\"token operator\">=</span> del_delta<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">,</span> <span class=\"token function\">shuffle_tombstones</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span>tombstones<span class=\"token punctuation\">,</span>old_deletes_from_union<span class=\"token punctuation\">,</span>new_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"engineundo\"><a href=\"#engineundo\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::undo</h3>\n<p>Undo works conceptually by rewinding to the earliest point in history that a toggled undo group appears, and replaying history from there but with revisions in the new <code class=\"language-text\">undone_groups</code> not applied.</p>\n<ol>\n<li>First, it uses the <code class=\"language-text\">max_undo_so_far</code> field on every <code class=\"language-text\">Revision</code> as well as the set of changed undo groups to find the latest point before any of the changed groups were used.</li>\n<li>Next it uses <code class=\"language-text\">Engine::deletes_from_union_before_index</code> to find the <code class=\"language-text\">deletes_from_union</code> before that earliest revision. The earliest revision might have been the very first one so that's why we need to get it from <em>before</em> the revision and not <em>at</em> the previous revision.</li>\n<li>Then it loops over history after that point manipulating <code class=\"language-text\">deletes_from_union</code> to either <code class=\"language-text\">transform_expand</code> by the <code class=\"language-text\">inserts</code> and <code class=\"language-text\">union</code> the <code class=\"language-text\">deletes</code> in the normal case, or <code class=\"language-text\">transform_union</code> (transform then delete) over the <code class=\"language-text\">inserts</code> in the undone case.</li>\n<li>Now that it has a fixed <code class=\"language-text\">deletes_from_union</code> it uses <code class=\"language-text\">shuffle</code> to update <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code>.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// This computes undo all the way from the beginning. An optimization would be to not</span>\n<span class=\"token comment\">// recompute the prefix up to where the history diverges, but it's not clear that's</span>\n<span class=\"token comment\">// even worth the code complexity.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">compute_undo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> groups<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>BTreeSet<span class=\"token operator\">&lt;</span>usize<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span>Revision<span class=\"token punctuation\">,</span> Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> toggled_groups <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>undone_groups<span class=\"token punctuation\">.</span><span class=\"token function\">symmetric_difference</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_candidate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find_first_undo_candidate_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>toggled_groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> deletes_from_union <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">deletes_from_union_before_index</span><span class=\"token punctuation\">(</span>first_candidate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> rev <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">[</span>first_candidate<span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> Edit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">ref</span> undo_group<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> deletes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> rev<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> groups<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>undo_group<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>inserts<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    deletes_from_union <span class=\"token operator\">=</span> deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">transform_union</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>inserts<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    deletes_from_union <span class=\"token operator\">=</span> deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>deletes<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    deletes_from_union <span class=\"token operator\">=</span> deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>deletes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> deletes_bitxor <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">bitxor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max_undo_so_far <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max_undo_so_far<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span>Revision <span class=\"token punctuation\">{</span>\n        rev_id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">next_rev_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        max_undo_so_far<span class=\"token punctuation\">,</span>\n        edit<span class=\"token punctuation\">:</span> Undo <span class=\"token punctuation\">{</span> toggled_groups<span class=\"token punctuation\">,</span> deletes_bitxor <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> deletes_from_union<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> groups<span class=\"token punctuation\">:</span> BTreeSet<span class=\"token operator\">&lt;</span>usize<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>new_rev<span class=\"token punctuation\">,</span> new_deletes_from_union<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">compute_undo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>groups<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">,</span> new_tombstones<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>new_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones <span class=\"token operator\">=</span> new_tombstones<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union <span class=\"token operator\">=</span> new_deletes_from_union<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>undone_groups <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>new_rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>rev_id_counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"enginegc\"><a href=\"#enginegc\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::gc</h3>\n<p>This is a large function that is only used in the single-device case to limit the size of history and the size of <code class=\"language-text\">deletes_from_union</code> so that operations like insertion and undo are always fast even on large documents with long histories. It throws away information, so it is incorrect in the multi-device case, and so we have plans for optimizing all our representations and algorithms so that it is unnecessary and we can remove it. It's not particularly interesting, if you want to see how it works you can read the code.</p>\n<h3 id=\"enginemerge\"><a href=\"#enginemerge\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engine::merge</h3>\n<p>This is the operation you were (maybe) waiting for! The CRDT merge operation that allows peer-to-peer syncing of edits in a conflict-free eventually-consistent way. It takes <code class=\"language-text\">self</code> and another instance of <code class=\"language-text\">Engine</code> and incorporates any changes which that <code class=\"language-text\">Engine</code> has into <code class=\"language-text\">self</code>.</p>\n<p>It does this by finding changes which the other <code class=\"language-text\">Engine</code> has but <code class=\"language-text\">self</code> doesn't and doing a whole bunch of transformations so that those edits can be appended directly on to the end of <code class=\"language-text\">self</code>'s list of <code class=\"language-text\">revs</code>. The append-only nature of merge preserves the ability for operations like <code class=\"language-text\">Engine::delta_rev_head</code> to work, and allows future optimizations of how things are persisted.</p>\n<p>The fact that, even in a merge, <code class=\"language-text\">Revision</code>s are only ever appended leads to the interesting fact that two peers (Separate devices/engines that share state my merging) can have <code class=\"language-text\">Engine</code>s that represent the same document contents and history, but where the <code class=\"language-text\">Revision</code>s are in a totally different order. This is fine though because the <code class=\"language-text\">Revision</code> ids allow us to compare the identity of two <code class=\"language-text\">Revision</code>s even if their <code class=\"language-text\">Subset</code>s are different due to transforms, and undo groups allow us to maintain and manipulate undo history order separately from CRDT history order.</p>\n<p>In practice the order of the <code class=\"language-text\">Revision</code> history will tend to be very similar between peers. Any edit that occurs while another edit is visible on screen (present in this peer's <code class=\"language-text\">Engine</code>) will never be re-ordered before that visible edit. Thus if there are no concurrent edits made on devices that sync with each other by merging, the devices will end up with the same <code class=\"language-text\">Revision</code> history.</p>\n<p><strong>Note:</strong> As of the time this was written, Xi's <code class=\"language-text\">merge</code> implementation does not support undo operations, and will panic if one is encountered. We plan to fix this and expect that the structure of the merge operation will stay the same, just with more cases. So for the rest of this description, presume <code class=\"language-text\">Edit</code>s are the only type of <code class=\"language-text\">Revision</code>.</p>\n<h4 id=\"base-and-common-revisions\"><a href=\"#base-and-common-revisions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Base and common revisions</h4>\n<p>An important part of merging is figuring out which revisions the two sides have in common. These common revisions are found as two parts:</p>\n<ol>\n<li>\n<p>The \"base\": A prefix of the same length of both histories such that the set of revisions in both prefixes is the same.</p>\n<ul>\n<li>Note that they aren't necessarily in the same order, just all shared. That's because all indices are relative to the union string, which is the same regardless of the order of the revisions that created it.</li>\n<li>We ignore everything in this prefix, so the longer it is the faster the merge runs, but a length of 0 is perfectly fine and in fact at the time this was written, that's what Xi uses.</li>\n<li>Ideally this should be the longest prefix length such that the set of revisions in the prefix is equal in both histories, and we plan on using this later as an important optimization.</li>\n</ul>\n</li>\n<li>\n<p>The \"common\" revisions: After the base, some revisions on each side will be shared by both sides. The common revisions are the intersection of the two revision sets after the base.</p>\n<ul>\n<li>Note that the common revisions aren't necessarily in the same positions or order on each side.</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"img/merge-intro.png\" alt=\"CRDT Merge Flow Example\"></p>\n<p>If you're wondering how you can end up with common revisions not in the base, and in different positions and ordering, it's rare, but it can happen under high levels of asynchrony. These cases can occur even with only two peers.</p>\n<p>See the example sequence below, where the boxes represent revisions, and the arrows represent merges. The red arrow with its two sides illustrated below it, shows such a tricky merge.</p>\n<p>This example isn't meant to show a networking scenario, just a legal sequence of applying operations on two CRDT instances. These scenarios can be caused by asynchrony of the network, but exactly how depends on the syncing topology and ordering guarantees, some ways of using <code class=\"language-text\">merge</code> may require 3 peers to trigger a case like this in real use.</p>\n<p><img src=\"img/merge-common-diff-3.png\" alt=\"CRDT merge common in different order\"></p>\n<p>The first two steps of the <code class=\"language-text\">merge</code> operation are to find the base index and common revision set.\nAs of writing these are both the easiest possible correct representations, and not the fastest ones, but we plan on optimizing soon.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Find an index before which everything is the same</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">find_base_index</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>Revision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>Revision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> usize <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assert!</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert!</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rev_id <span class=\"token operator\">==</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// TODO find the maximum base revision.</span>\n    <span class=\"token comment\">// returning 1 should have the same behavior, but worse performance</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Find a set of revisions common to both lists</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">find_common</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>Revision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>Revision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> BTreeSet<span class=\"token operator\">&lt;</span>RevId<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO make this faster somehow?</span>\n    <span class=\"token keyword\">let</span> a_ids<span class=\"token punctuation\">:</span> BTreeSet<span class=\"token operator\">&lt;</span>RevId<span class=\"token operator\">></span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>r<span class=\"token operator\">|</span> r<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> b_ids<span class=\"token punctuation\">:</span> BTreeSet<span class=\"token operator\">&lt;</span>RevId<span class=\"token operator\">></span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>r<span class=\"token operator\">|</span> r<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a_ids<span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b_ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"rearranging\"><a href=\"#rearranging\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rearranging</h4>\n<p>To make the rest of the algorithm easier, it would be nice if we didn't have to worry about any of the common revisions and could just work with the new revisions on each side. We can realize this by transforming and reordering all the new revisions on each side after all of the common revisions.</p>\n<p>We can safely use transforms to reorder two revisions if neither of the revisions depends on the other. A revision depends on all the revisions that were in the <code class=\"language-text\">Engine</code> at the time <code class=\"language-text\">Engine::edit_rev</code> was called. We know that a new revision can't depend on a common revision after it, because the append-only nature means that ordering couldn't occur. Furthermore, the common revision can't depend on the new revision, because by definitions the other peer has the common revision but not the new revision, and merges never merge a revision but not its dependencies. Thus, even without explicit dependency information, we know we can reorder all the new revisions on each side after all the common revisions.</p>\n<p>Note that though it's nice to think about it as reordering the histories, really we just need to compute the transformed new revisions, transforming each new revision to be based on all common revisions after it. See the \"computed\" and \"taken to next step\" annotations of the diagram below, they are what <code class=\"language-text\">rearrange</code> returns, note that transformed operations are marked with a prime tick but they maintain their ID.</p>\n<p><img src=\"img/merge-rearrange.png\" alt=\"CRDT merge rearrange\"></p>\n<p>We do the rearranging by working from the end of the list of revisions to the beginning. We build up a <code class=\"language-text\">Subset</code> representing all the characters that were added to the union string by the common revisions after each point. Starting with the identity transformation (an entirely 0-count <code class=\"language-text\">Subset</code>), whenever we encounter a common revision we add the characters it inserts to the transform. When we encounter a new revision we <code class=\"language-text\">transform_expand</code> its inserts and deletes by the transform <code class=\"language-text\">Subset</code> and add it to the output <code class=\"language-text\">Vec</code>. Then we <code class=\"language-text\">transform_shrink</code> the transform <code class=\"language-text\">Subset</code> by the characters inserted in the new revision, because we only want to fast-forward new revisions over common revisions after them, not new revisions after them.</p>\n<p>That was likely too imprecise and hard to follow, so here's an example diagram and the code:</p>\n<p><img src=\"img/merge-rearrange-example.png\" alt=\"CRDT merge rearrange example\"></p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Returns the operations in `revs` that don't have their `rev_id` in</span>\n<span class=\"token comment\">/// `base_revs`, but modified so that they are in the same order but based on</span>\n<span class=\"token comment\">/// the `base_revs`. This allows the rest of the merge to operate on only</span>\n<span class=\"token comment\">/// revisions not shared by both sides.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Conceptually, see the diagram below, with `.` being base revs and `n` being</span>\n<span class=\"token comment\">/// non-base revs, `N` being transformed non-base revs, and rearranges it:</span>\n<span class=\"token comment\">/// .n..n...nn..  -> ........NNNN -> returns vec![N,N,N,N]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">rearrange</span><span class=\"token punctuation\">(</span>revs<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>Revision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> base_revs<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>BTreeSet<span class=\"token operator\">&lt;</span>RevId<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> head_len<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Vec<span class=\"token operator\">&lt;</span>Revision<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// transform representing the characters added by common revisions after a point.</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> s <span class=\"token operator\">=</span> Subset<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>head_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> out <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> base_revs<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> rev <span class=\"token keyword\">in</span> revs<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> is_base <span class=\"token operator\">=</span> base_revs<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rev<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> contents <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> rev<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Edit <span class=\"token punctuation\">{</span>priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> deletes<span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> is_base <span class=\"token punctuation\">{</span>\n                    s <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">transform_union</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    None\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// fast-forward this revision over all common ones after it</span>\n                    <span class=\"token keyword\">let</span> transformed_inserts <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">let</span> transformed_deletes <span class=\"token operator\">=</span> deletes<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// we don't want new revisions before this to be transformed after us</span>\n                    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">transform_shrink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>transformed_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Edit <span class=\"token punctuation\">{</span>\n                        inserts<span class=\"token punctuation\">:</span> transformed_inserts<span class=\"token punctuation\">,</span>\n                        deletes<span class=\"token punctuation\">:</span> transformed_deletes<span class=\"token punctuation\">,</span>\n                        priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Undo <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token function\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can't merge undo yet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>edit<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> contents <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Revision <span class=\"token punctuation\">{</span> edit<span class=\"token punctuation\">,</span> rev_id<span class=\"token punctuation\">:</span> rev<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">,</span> max_undo_so_far<span class=\"token punctuation\">:</span> rev<span class=\"token punctuation\">.</span>max_undo_so_far <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">as_mut_slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"computing-deltas\"><a href=\"#computing-deltas\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computing Deltas</h4>\n<p>Merging the changes from <code class=\"language-text\">other</code> into <code class=\"language-text\">self</code> doesn't just involve appending the <code class=\"language-text\">Revision</code>s, we also have to update the <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code> of <code class=\"language-text\">self</code> to correspond with those new revisions. In <code class=\"language-text\">Engine::edit_rev</code> we transform an <code class=\"language-text\">InsertDelta</code> until we can apply it to the text, but when merging we don't have any <code class=\"language-text\">Delta</code>s. Additionally, the operation for resolving the order of concurrent insertions based on priority is <code class=\"language-text\">Delta::transform_expand</code> and we don't have an equivalent for <code class=\"language-text\">Subset</code> (<code class=\"language-text\">Subset::transform_expand</code> does a slightly different thing).</p>\n<p>There's two possible approaches:</p>\n<ol>\n<li>Transform the new revisions from <code class=\"language-text\">other</code> and append them, using a newly written equivalent of <code class=\"language-text\">Delta::transform_expand</code> for <code class=\"language-text\">Subset</code>s. Then work through the resulting histories to figure out what characters we need to add to the <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code>, and where. We think it may be easier to support undo and incremental Ledger updating with this approach, and we plan on switching eventually, but for now it's not what we chose first.</li>\n<li>Create some <code class=\"language-text\">Delta</code>s! We can turn the new revisions from <code class=\"language-text\">other</code> into a different representation that encodes the <code class=\"language-text\">inserts</code> as an <code class=\"language-text\">InsertDelta</code> so that we can transform them using <code class=\"language-text\">Delta::transform_expand</code> and eventually apply them to the <code class=\"language-text\">text</code> of <code class=\"language-text\">self</code>.</li>\n</ol>\n<p>We can create these <code class=\"language-text\">DeltaOp</code>s by working backwards from the end of the <code class=\"language-text\">rearrange</code>d new revisions from <code class=\"language-text\">other</code> and keeping track of all the characters they insert in a <code class=\"language-text\">Subset</code> using <code class=\"language-text\">Subset::transform_union</code>. Then for each revision we can use <code class=\"language-text\">shuffle_tombstones</code> to extract a <code class=\"language-text\">Rope</code> of all the inserted characters, and then use <code class=\"language-text\">Delta::synthesize</code> to create a <code class=\"language-text\">Delta</code> from our <code class=\"language-text\">Subset</code> of inserts to the inserts <code class=\"language-text\">Subset</code> from the previous iteration (one step forward in time since we're iterating backwards). This gives us a <code class=\"language-text\">Delta</code> inserting the new characters from this <code class=\"language-text\">Revision</code>, which we can bundle into a <code class=\"language-text\">DeltaOp</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> DeltaOp <span class=\"token punctuation\">{</span>\n    rev_id<span class=\"token punctuation\">:</span> RevId<span class=\"token punctuation\">,</span>\n    priority<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n    undo_group<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">,</span>\n    inserts<span class=\"token punctuation\">:</span> InsertDelta<span class=\"token operator\">&lt;</span>RopeInfo<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    deletes<span class=\"token punctuation\">:</span> Subset<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Transform `revs`, which doesn't include information on the actual content of the operations,</span>\n<span class=\"token comment\">/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">compute_deltas</span><span class=\"token punctuation\">(</span>revs<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>Revision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Rope<span class=\"token punctuation\">,</span> tombstones<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Rope<span class=\"token punctuation\">,</span> deletes_from_union<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Vec<span class=\"token operator\">&lt;</span>DeltaOp<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> out <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cur_all_inserts <span class=\"token operator\">=</span> Subset<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> rev <span class=\"token keyword\">in</span> revs<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> rev<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Edit <span class=\"token punctuation\">{</span>priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> deletes<span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> older_all_inserts <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">transform_union</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cur_all_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// TODO could probably be more efficient by avoiding shuffling from head every time</span>\n                <span class=\"token keyword\">let</span> tombstones_here <span class=\"token operator\">=</span> <span class=\"token function\">shuffle_tombstones</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> tombstones<span class=\"token punctuation\">,</span> deletes_from_union<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>older_all_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> delta <span class=\"token operator\">=</span> Delta<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">synthesize</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tombstones_here<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>older_all_inserts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cur_all_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// TODO create InsertDelta directly and more efficiently instead of factoring</span>\n                <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>ins<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> delta<span class=\"token punctuation\">.</span><span class=\"token function\">factor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>DeltaOp <span class=\"token punctuation\">{</span>\n                    rev_id<span class=\"token punctuation\">:</span> rev<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">,</span>\n                    priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span>\n                    inserts<span class=\"token punctuation\">:</span> ins<span class=\"token punctuation\">,</span>\n                    deletes<span class=\"token punctuation\">:</span> deletes<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                cur_all_inserts <span class=\"token operator\">=</span> older_all_inserts<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Undo <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token function\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can't merge undo yet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">as_mut_slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"computing-transforms\"><a href=\"#computing-transforms\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computing Transforms</h4>\n<p>Now we have a list of <code class=\"language-text\">DeltaOp</code>s from <code class=\"language-text\">other</code> and a list of new <code class=\"language-text\">Revision</code>s from <code class=\"language-text\">self</code>. Keeping in mind the goal of appending the changes from other, we need to transform the <code class=\"language-text\">DeltaOp</code>s to be based on top of the new <code class=\"language-text\">Revision</code>s from <code class=\"language-text\">self</code>. This really just involves figuring out the correct indices in the union string that includes the newly inserted characters from <code class=\"language-text\">self</code>.</p>\n<p>In order to do this we need the new <code class=\"language-text\">inserts</code> from <code class=\"language-text\">self</code>, but in order to resolve the order of concurrent inserts, we also need the \"priority\" of the edits. So we have a helper called <code class=\"language-text\">compute_transforms</code> that returns a list of <code class=\"language-text\">(priority, inserts)</code> tuples.</p>\n<p>This helper does one other important thing, which is combine sequential edits by the same peer with the same priority into one transform. This is important because the next stage does a lot of work per-transform. Without this optimization a paragraph of typed inserted characters would be hundreds of transforms, but with the optimization it is one transform.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Computes a series of priorities and transforms for the deltas on the right</span>\n<span class=\"token comment\">/// from the new revisions on the left.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Applies an optimization where it combines sequential revisions with the</span>\n<span class=\"token comment\">/// same priority into one transform to decrease the number of transforms that</span>\n<span class=\"token comment\">/// have to be considered in `rebase` substantially for normal editing</span>\n<span class=\"token comment\">/// patterns. Any large runs of typing in the same place by the same user (e.g</span>\n<span class=\"token comment\">/// typing a paragraph) will be combined into a single segment in a transform</span>\n<span class=\"token comment\">/// as opposed to thousands of revisions.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">compute_transforms</span><span class=\"token punctuation\">(</span>revs<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>Revision<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Vec<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>FullPriority<span class=\"token punctuation\">,</span> Subset<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> out <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> last_priority<span class=\"token punctuation\">:</span> Option<span class=\"token operator\">&lt;</span>usize<span class=\"token operator\">></span> <span class=\"token operator\">=</span> None<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> revs<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Edit <span class=\"token punctuation\">{</span>priority<span class=\"token punctuation\">,</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>edit <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> last_priority <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> last<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token punctuation\">(</span>FullPriority<span class=\"token punctuation\">,</span> Subset<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">last_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                last<span class=\"token number\">.1</span> <span class=\"token operator\">=</span> last<span class=\"token number\">.1</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform_union</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                last_priority <span class=\"token operator\">=</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> prio <span class=\"token operator\">=</span> FullPriority <span class=\"token punctuation\">{</span> priority<span class=\"token punctuation\">,</span> session_id<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>rev_id<span class=\"token punctuation\">.</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prio<span class=\"token punctuation\">,</span> inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    out\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"rebasing\"><a href=\"#rebasing\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rebasing</h4>\n<p>Now that we have the <code class=\"language-text\">DeltaOp</code>s and transforms, we just need to forward the <code class=\"language-text\">DeltaOp</code>s through the transforms. The helper for this is named <code class=\"language-text\">rebase</code> since it's analogous to a <code class=\"language-text\">git rebase</code>.</p>\n<p>Basically, for every <code class=\"language-text\">DeltaOp</code> from <code class=\"language-text\">other</code>, we:</p>\n<ol>\n<li><code class=\"language-text\">Delta::transform_expand</code> it by each transform from <code class=\"language-text\">self</code>.</li>\n<li>Update the transforms for the next round so they include the <code class=\"language-text\">DeltaOp</code>s inserts, and so effectively they become part of the base for both sides.</li>\n<li>Apply the <code class=\"language-text\">DeltaOp</code> to the <code class=\"language-text\">text</code> and <code class=\"language-text\">tombstones</code></li>\n<li>Create a <code class=\"language-text\">Revision</code> from it and append it to the history.</li>\n</ol>\n<p>This procedure works iteratively starting with the results of <code class=\"language-text\">compute_transforms</code> and <code class=\"language-text\">compute_deltas</code>. Every iteration it takes the first <code class=\"language-text\">DeltaOp</code>, transforms it and applies it to the text, and updates all the transforms so that it is effectively in the base of both sides. See the diagrams below of an initial state, the operations performed in the first iteration, and the state after the first iteration. You can refer to the code further below to see how they align.</p>\n<p><img src=\"img/merge-rebase-initial.png\" alt=\"CRDT merge rebase initial state\">\n<img src=\"img/merge-rebase-trace.png\" alt=\"CRDT merge rebase trace\">\n<img src=\"img/merge-rebase-after.png\" alt=\"CRDT merge rebase state after\"></p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new</span>\n<span class=\"token comment\">/// revisions on top of the revisions represented by `expand_by`.</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">rebase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> expand_by<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>FullPriority<span class=\"token punctuation\">,</span> Subset<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> b_new<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>DeltaOp<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">mut</span> text<span class=\"token punctuation\">:</span> Rope<span class=\"token punctuation\">,</span> <span class=\"token keyword\">mut</span> tombstones<span class=\"token punctuation\">:</span> Rope<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">mut</span> deletes_from_union<span class=\"token punctuation\">:</span> Subset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">mut</span> max_undo_so_far<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span>Vec<span class=\"token operator\">&lt;</span>Revision<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Rope<span class=\"token punctuation\">,</span> Rope<span class=\"token punctuation\">,</span> Subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> out <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>b_new<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> next_expand_by <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>expand_by<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> op <span class=\"token keyword\">in</span> b_new<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> DeltaOp <span class=\"token punctuation\">{</span> rev_id<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span> <span class=\"token keyword\">mut</span> inserts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">mut</span> deletes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> op<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> full_priority <span class=\"token operator\">=</span> FullPriority <span class=\"token punctuation\">{</span> priority<span class=\"token punctuation\">,</span> session_id<span class=\"token punctuation\">:</span> rev_id<span class=\"token punctuation\">.</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// (1) (2) (3) expand by each in expand_by</span>\n        <span class=\"token keyword\">for</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>trans_priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> trans_inserts<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>expand_by <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> after <span class=\"token operator\">=</span> full_priority <span class=\"token operator\">>=</span> trans_priority<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// should never be ==</span>\n            <span class=\"token comment\">// d-expand by other</span>\n            inserts <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span>trans_inserts<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// trans-expand other by expanded so they have the same context</span>\n            <span class=\"token keyword\">let</span> inserted <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">inserted_subset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> new_trans_inserts <span class=\"token operator\">=</span> trans_inserts<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>inserted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// The deletes are already after our inserts, but we need to include the other inserts</span>\n            deletes <span class=\"token operator\">=</span> deletes<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>new_trans_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// (6) On the next step we want things in expand_by to have op in the context</span>\n            next_expand_by<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>trans_priority<span class=\"token punctuation\">,</span> new_trans_inserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// (4) Update the text and tombstones</span>\n        <span class=\"token keyword\">let</span> text_inserts <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">transform_shrink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> text_with_inserts <span class=\"token operator\">=</span> text_inserts<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> inserted <span class=\"token operator\">=</span> inserts<span class=\"token punctuation\">.</span><span class=\"token function\">inserted_subset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> expanded_deletes_from_union <span class=\"token operator\">=</span> deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">transform_expand</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>inserted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> new_deletes_from_union <span class=\"token operator\">=</span> expanded_deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>deletes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>new_text<span class=\"token punctuation\">,</span> new_tombstones<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n            <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>text_with_inserts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tombstones<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>expanded_deletes_from_union<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>new_deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        text <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n        tombstones <span class=\"token operator\">=</span> new_tombstones<span class=\"token punctuation\">;</span>\n        deletes_from_union <span class=\"token operator\">=</span> new_deletes_from_union<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// (5) Build a revision and append it to the history</span>\n        max_undo_so_far <span class=\"token operator\">=</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cmp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max_undo_so_far<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Revision <span class=\"token punctuation\">{</span>\n            rev_id<span class=\"token punctuation\">,</span> max_undo_so_far<span class=\"token punctuation\">,</span>\n            edit<span class=\"token punctuation\">:</span> Contents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Edit <span class=\"token punctuation\">{</span>\n                priority<span class=\"token punctuation\">,</span> undo_group<span class=\"token punctuation\">,</span> deletes<span class=\"token punctuation\">,</span>\n                inserts<span class=\"token punctuation\">:</span> inserted<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        expand_by <span class=\"token operator\">=</span> next_expand_by<span class=\"token punctuation\">;</span>\n        next_expand_by <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>expand_by<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> tombstones<span class=\"token punctuation\">,</span> deletes_from_union<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"thats-it\"><a href=\"#thats-it\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>That's it!</h4>\n<p>After all those stages are complete, the merge is done. The <code class=\"language-text\">rebase</code> has appended the transformed versions of all the new <code class=\"language-text\">Revision</code>s from <code class=\"language-text\">other</code> and updated the <code class=\"language-text\">text</code>, <code class=\"language-text\">tombstones</code> and <code class=\"language-text\">deletes_from_union</code>. The actual <code class=\"language-text\">Engine::merge</code> function just ties all these helpers together:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">/// Merge the new content from another Engine into this one with a CRDT merge</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Engine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> new_revs<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> tombstones<span class=\"token punctuation\">,</span> deletes_from_union<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> base_index <span class=\"token operator\">=</span> <span class=\"token function\">find_base_index</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> a_to_merge <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">[</span>base_index<span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> b_to_merge <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">[</span>base_index<span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> common <span class=\"token operator\">=</span> <span class=\"token function\">find_common</span><span class=\"token punctuation\">(</span>a_to_merge<span class=\"token punctuation\">,</span> b_to_merge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> a_new <span class=\"token operator\">=</span> <span class=\"token function\">rearrange</span><span class=\"token punctuation\">(</span>a_to_merge<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>common<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> b_new <span class=\"token operator\">=</span> <span class=\"token function\">rearrange</span><span class=\"token punctuation\">(</span>b_to_merge<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>common<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> b_deltas <span class=\"token operator\">=</span> <span class=\"token function\">compute_deltas</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b_new<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">.</span>tombstones<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> expand_by <span class=\"token operator\">=</span> <span class=\"token function\">compute_transforms</span><span class=\"token punctuation\">(</span>a_new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> max_undo <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">max_undo_group_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rebase</span><span class=\"token punctuation\">(</span>expand_by<span class=\"token punctuation\">,</span> b_deltas<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> max_undo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>tombstones <span class=\"token operator\">=</span> tombstones<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>deletes_from_union <span class=\"token operator\">=</span> deletes_from_union<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>revs<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> new_revs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"testing\"><a href=\"#testing\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h4>\n<p>Every operation is tested in the <code class=\"language-text\">tests</code> module of <code class=\"language-text\">engine.rs</code>. The <code class=\"language-text\">Engine::merge</code> function is tested using a facility for creating and running \"merge scripts\" that describe a sequence of operations on multiple engines, merges between them, and assertions about their contents. This makes building complex merge scenarios to test much easier. --></p>","excerpt":"This document contains a detailed description of the data structures and operations Xi uses for text. These data structures and the   operation also form a Conflict-free Replicated Data Type (CRDT). It being a CRDT allows Xi to be used for concurrent editing of text on multiple devices, it can merge…","frontmatter":{"title":"CRDT - The Xi Text Engine"}},"allMarkdownRemark":{"edges":[{"node":{"id":"db31e77f-3fda-57fc-9830-61c9f7c222dd","fields":{"slug":"/frontend-protocol/"},"frontmatter":{"title":"The Frontend Protocol"}}},{"node":{"id":"e81dd02d-d53d-5928-978d-37b7a16cdb61","fields":{"slug":"/plugin/"},"frontmatter":{"title":"Plugin architecture"}}},{"node":{"id":"ef83d327-af33-537c-b865-304c9cbd7567","fields":{"slug":"/crdt/"},"frontmatter":{"title":"CRDT - An approach to async plugins and undo"}}},{"node":{"id":"056635a4-9cff-573b-9253-1c2afd68ff96","fields":{"slug":"/config/"},"frontmatter":{"title":"Working with the config system"}}},{"node":{"id":"e7b10047-5613-53ea-bdeb-3989cfe8ac10","fields":{"slug":"/crdt-details/"},"frontmatter":{"title":"CRDT - The Xi Text Engine"}}},{"node":{"id":"8493f667-6117-50a0-bc92-21f304190a9f","fields":{"slug":"/fuchsia-ledger-crdts/"},"frontmatter":{"title":"CRDT - Using the Ledger for CRDTs"}}},{"node":{"id":"637adc80-f545-583f-b103-0e6256f0efe1","fields":{"slug":"/rope-science-00/"},"frontmatter":{"title":"Rope science - Introduction"}}},{"node":{"id":"d6abbbb0-ce0b-5810-8ab1-40db5f8fbb4d","fields":{"slug":"/rope-science-01/"},"frontmatter":{"title":"Rope science, part 1 - MapReduce for text"}}},{"node":{"id":"0b56a298-7fea-52be-b0c1-1924e8de94df","fields":{"slug":"/rope-science-02/"},"frontmatter":{"title":"Rope science, part 2 - metrics"}}},{"node":{"id":"f3d25a72-d849-52f7-8fb4-6d586db9b401","fields":{"slug":"/rope-science-03/"},"frontmatter":{"title":"Rope science, part 3 - Grapheme cluster boundaries"}}},{"node":{"id":"ed9dc1bf-9c35-58a0-b8ed-e702bdbc974f","fields":{"slug":"/rope-science-04/"},"frontmatter":{"title":"Rope science, part 4 - parenthesis matching"}}},{"node":{"id":"e3b3971e-a314-5c04-adc0-30c2e2f21345","fields":{"slug":"/rope-science-05/"},"frontmatter":{"title":"Rope science, part 5 - incremental word wrapping"}}},{"node":{"id":"271d1a9b-90e4-5315-b138-2a02a017e117","fields":{"slug":"/rope-science-06/"},"frontmatter":{"title":"Rope science, part 6 - parallel and asynchronous word wrapping"}}},{"node":{"id":"ef5e3b38-01da-5a9c-ad36-fce16dacff86","fields":{"slug":"/rope-science-08/"},"frontmatter":{"title":"Rope science, part 8 - CRDTs for concurrent editing"}}},{"node":{"id":"0c5f285f-2a9b-589f-8eff-a79435e54257","fields":{"slug":"/rope-science-09/"},"frontmatter":{"title":"Rope science, part 9 - CRDT Approach to Async Plugins and Undo"}}},{"node":{"id":"ef95af30-321f-5d87-a5e3-720e4eff00f9","fields":{"slug":"/rope-science-10/"},"frontmatter":{"title":"Rope science, part 10 - designing for a conflict-free world"}}},{"node":{"id":"4dd8698d-d45f-543c-9905-eba9659b68b0","fields":{"slug":"/rope-science-11/"},"frontmatter":{"title":"Rope science, part 11 - practical syntax highlighting"}}},{"node":{"id":"c8b885e6-57e4-5e66-9651-7b47f528793d","fields":{"slug":"/rope-science-12/"},"frontmatter":{"title":"Rope science, part 12 - minimal invalidation"}}}]}},"pageContext":{"id":"e7b10047-5613-53ea-bdeb-3989cfe8ac10"}}