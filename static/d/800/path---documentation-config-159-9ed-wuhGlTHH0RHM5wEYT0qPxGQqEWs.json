{"data":{"markdownRemark":{"id":"056635a4-9cff-573b-9253-1c2afd68ff96","html":"<p>This document is intended for the authors of front-end clients.</p>\n<p><code>xi-core</code> supports two mechanisms for handling persistent user preferences:\nfile-based and RPC-based (unmanaged). The file-based system is similar to that employed by\neditors such as vim or Sublime Text; the RPC system is an alternative provided\nfor front-ends that wish to manage preferences on their own, or which cannot\nsupport the file-based approach for platform reasons.</p>\n<p>Clients which wish to use the file-based mechanism must explicitly <strong>opt-in</strong> by\nincluding <code>\"config_dir\": \"$CONFIG_PATH\"</code> in the params of the <code>client_started</code> RPC,\nwhere <code>$CONFIG_PATH</code> is a path to a directory that will contain config files.</p>\n<p>If using file-based config, <code>xi-core</code> is responsible for watching those files\nfor changes, and will reload them appropriately.</p>\n<h3 id=\"file-based-config\"><a href=\"#file-based-config\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File based config</h3>\n<p><code>xi-core</code> user config files are <a href=\"https://github.com/toml-lang/toml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TOML</a> files with\nthe <code>.xiconfig</code> file extension. These files should exist in the root of the\nuser's config directory. General preferences should be in a file named\n<code>preferences.xiconfig</code>, and language/syntax-specifc preferences should be given\nthe lowercase language name and the extension, for instance <code>yaml.xiconfig</code>,\n<code>cpp.xiconfig</code>, and <code>markdown.xiconfig</code>. Each file represents to what we call\na 'config domain', and the keys &#x26; values in the file constitute a 'config\ntable'.</p>\n<h3 id=\"config-table-format\"><a href=\"#config-table-format\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config table format</h3>\n<p>Internally, all config tables are represented as JSON objects; all keys must be\nstrings, and values must be objects, arrays, strings, or bools. Null values are\nnot allowed.</p>\n<p>When we load config files, we convert from TOML to JSON. The TOML 'Datetime'\ntype is converted to a string.</p>\n<h3 id=\"defaults\"><a href=\"#defaults\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defaults</h3>\n<p><code>xi-core</code> includes a number of default config tables. In the source, these are\nincluded as <code>TOML</code> files (see\n<a href=\"https://github.com/xi-editor/xi-editor/blob/master/rust/core-lib/assets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">/rust/core-lib/assets/</a>).\nAt compile time these are baked into the binary.</p>\n<h3 id=\"config-domains\"><a href=\"#config-domains\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config Domains</h3>\n<p>We refer to a particular group of config settings as a 'config domain'. A domain\nmay contain both default and user settings; user settings always override\ndefault settings for that given domain. Not all domains are persistent; for\ninstance there may be a 'user override' domain for each active view, which\nstores settings specific to that view, and which is forgotten when that view\nis closed. This would be used, for instance, if the user has manually changed\nan individual view's indentation settings.</p>\n<h3 id=\"generating-the-views-config-table\"><a href=\"#generating-the-views-config-table\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating the view's config table</h3>\n<p>Each view has its own config table, generated by merging the tables from various\ndomains relevant to that view. Those tables are merged in a predetermined order;\nhere in order of application (reverse priority):</p>\n<ol>\n<li>General config, including platform-specific overrides</li>\n<li>Syntax config</li>\n<li>User Overrides</li>\n</ol>\n<p>When a config changes, either because a file is modified or an RPC is received,\nthen the <code>config_changed</code> notification is sent to the client for each affected\nview. If a change does not affect any views (for instance if <code>rust.xiconfig</code> is\nmodified, but no Rust files are open) then no notification is sent.</p>\n<h3 id=\"rpc-based-config\"><a href=\"#rpc-based-config\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RPC based config</h3>\n<p>Configs can be set or modified with the <code>modify_user_config</code> RPC notification.\nThis notification has two paramaters, <code>domain</code> and <code>changes</code>. <code>domain</code> can be\neither the string <code>\"general\"</code>, for the general user preferences domain, or else\nan object with a single key, which should be either <code>\"syntax\"</code> or\n<code>\"user_override\"</code>; the value in this case should be either a syntax name\n(identical to the file names, minus the extension, used for file-based config)\nor a view identifier.</p>\n<p><strong>Note</strong> it is an error to modify one of the 'general' or 'syntax' domains over\nRPC <em>if</em> the client has opted into the file-based config mechanism.</p>\n<h4 id=\"examples\"><a href=\"#examples\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h4>\n<p>If a client is not opting in to file-based config (and is persisting\npreferences through another mechanism) than it should send those\npreferences immediately after launch, and before opening any views:</p>\n<pre><code class=\"language-js\">// send the user's general preferences\n{\n    \"method\": \"modify_user_config\",\n    \"params\": {\n        \"domain\": \"general\",\n        \"changes\": {\n            \"font_face\": \"Monaco\",\n            \"font_size\": 18.0,\n            \"translate_tabs_to_spaces\": false\n        }\n    }\n}\n// and their markdown-specific preferences\n{\n    \"method\": \"modify_user_config\",\n    \"params\": {\n        \"domain\": { \"syntax\": \"markdown\" },\n        \"changes\": {\n            \"font_face\": \"Chalkboard\"\n        }\n    }\n}\n</code></pre>\n<p>Regardless of whether the file-based config system is being used,\n<em>non-persistent</em> view-specific settings can only be modified over RPC. For\ninstance, if the same user as above wanted to specifically use four-space\nindentation for a view, the client would send the following RPC:</p>\n<pre><code class=\"language-js\">// send the user's general preferences\n{\n    \"method\": \"modify_user_config\",\n    \"params\": {\n        \"domain\": { \"user_override\": \"view-id-1\" },\n        \"changes\": {\n            \"translate_tabs_to_spaces\": true,\n            \"tab_size\": 4\n        }\n    }\n}\n</code></pre>\n<h4 id=\"null-values\"><a href=\"#null-values\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null values</h4>\n<p>Null values are allowed in tables sent over RPC; these are interpreted as the\ndeletion of any existing value for that key in the given domain.</p>\n<h3 id=\"validation\"><a href=\"#validation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation</h3>\n<p>Whenever a config table is modified, either through the RPC mechanism or by\nediting a file, the updated table is passed through a validator. If the table is\ninvalid (for instance if it contains unrecognized keys) then an error is\nreported and the new table is ignored.</p>","excerpt":"This document is intended for the authors of front-end clients. xi-core  supports two mechanisms for handling persistent user preferences:\nfile-based and RPC-based (unmanaged). The file-based system is similar to that employed by\neditors such as vim or Sublime Text; the RPC system is an alternative…","frontmatter":{"title":"Working with the config system"}},"allMarkdownRemark":{"edges":[{"node":{"id":"159ebaf9-aed2-5ad5-b403-f0a2c391cbef","fields":{"slug":"/frontend-notes/"},"frontmatter":{"title":"Notes on writing front-ends"}}},{"node":{"id":"db31e77f-3fda-57fc-9830-61c9f7c222dd","fields":{"slug":"/frontend-protocol/"},"frontmatter":{"title":"The Frontend Protocol"}}},{"node":{"id":"e81dd02d-d53d-5928-978d-37b7a16cdb61","fields":{"slug":"/plugin/"},"frontmatter":{"title":"Plugin architecture"}}},{"node":{"id":"056635a4-9cff-573b-9253-1c2afd68ff96","fields":{"slug":"/config/"},"frontmatter":{"title":"Working with the config system"}}},{"node":{"id":"ef83d327-af33-537c-b865-304c9cbd7567","fields":{"slug":"/crdt/"},"frontmatter":{"title":"CRDT - An approach to async plugins and undo"}}},{"node":{"id":"e7b10047-5613-53ea-bdeb-3989cfe8ac10","fields":{"slug":"/crdt-details/"},"frontmatter":{"title":"CRDT - The Xi Text Engine"}}},{"node":{"id":"8493f667-6117-50a0-bc92-21f304190a9f","fields":{"slug":"/fuchsia-ledger-crdts/"},"frontmatter":{"title":"CRDT - Using the Ledger for CRDTs"}}},{"node":{"id":"637adc80-f545-583f-b103-0e6256f0efe1","fields":{"slug":"/rope-science-00/"},"frontmatter":{"title":"Rope science - Introduction"}}},{"node":{"id":"d6abbbb0-ce0b-5810-8ab1-40db5f8fbb4d","fields":{"slug":"/rope-science-01/"},"frontmatter":{"title":"Rope science, part 1 - MapReduce for text"}}},{"node":{"id":"0b56a298-7fea-52be-b0c1-1924e8de94df","fields":{"slug":"/rope-science-02/"},"frontmatter":{"title":"Rope science, part 2 - metrics"}}},{"node":{"id":"f3d25a72-d849-52f7-8fb4-6d586db9b401","fields":{"slug":"/rope-science-03/"},"frontmatter":{"title":"Rope science, part 3 - Grapheme cluster boundaries"}}},{"node":{"id":"ed9dc1bf-9c35-58a0-b8ed-e702bdbc974f","fields":{"slug":"/rope-science-04/"},"frontmatter":{"title":"Rope science, part 4 - parenthesis matching"}}},{"node":{"id":"e3b3971e-a314-5c04-adc0-30c2e2f21345","fields":{"slug":"/rope-science-05/"},"frontmatter":{"title":"Rope science, part 5 - incremental word wrapping"}}},{"node":{"id":"271d1a9b-90e4-5315-b138-2a02a017e117","fields":{"slug":"/rope-science-06/"},"frontmatter":{"title":"Rope science, part 6 - parallel and asynchronous word wrapping"}}},{"node":{"id":"ef5e3b38-01da-5a9c-ad36-fce16dacff86","fields":{"slug":"/rope-science-08/"},"frontmatter":{"title":"Rope science, part 8 - CRDTs for concurrent editing"}}},{"node":{"id":"b73f0ca0-d039-531c-91a7-b8d0893fc5e8","fields":{"slug":"/rope-science-08a/"},"frontmatter":{"title":"Rope science, part 8a - CRDT follow-up"}}},{"node":{"id":"0c5f285f-2a9b-589f-8eff-a79435e54257","fields":{"slug":"/rope-science-09/"},"frontmatter":{"title":"Rope science, part 9 - CRDT Approach to Async Plugins and Undo"}}},{"node":{"id":"ef95af30-321f-5d87-a5e3-720e4eff00f9","fields":{"slug":"/rope-science-10/"},"frontmatter":{"title":"Rope science, part 10 - designing for a conflict-free world"}}},{"node":{"id":"4dd8698d-d45f-543c-9905-eba9659b68b0","fields":{"slug":"/rope-science-11/"},"frontmatter":{"title":"Rope science, part 11 - practical syntax highlighting"}}},{"node":{"id":"c8b885e6-57e4-5e66-9651-7b47f528793d","fields":{"slug":"/rope-science-12/"},"frontmatter":{"title":"Rope science, part 12 - minimal invalidation"}}}]}},"pageContext":{"id":"056635a4-9cff-573b-9253-1c2afd68ff96"}}