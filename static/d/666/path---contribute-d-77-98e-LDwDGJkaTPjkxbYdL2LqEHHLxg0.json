{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The xi-editor project is committed to fostering and preserving a\ndiverse, welcoming community; all participants are expected to\nfollow the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/xi-editor/xi-editor/blob/master/CODE_OF_CONDUCT.md\"\n      }\n    }, `Code of Conduct`), `.`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#getting-started\"\n      }\n    }, `Getting Started`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#very-first-steps\"\n      }\n    }, `Very first steps`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#opening-issues\"\n      }\n    }, `Opening issues`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#participating-in-discussions\"\n      }\n    }, `Participating in discussions`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#improving-and-reviewing-docs\"\n      }\n    }, `Improving and reviewing docs`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#reviewing-and-testing-changes\"\n      }\n    }, `Reviewing and testing changes`)))), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#proposing-and-making-changes\"\n      }\n    }, `Proposing and making changes`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#finding-something-to-work-on\"\n      }\n    }, `Finding something to work on`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#before-you-start-work\"\n      }\n    }, `Before you start`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#before-you-open-your-pr\"\n      }\n    }, `Before you open your PR`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#review-process\"\n      }\n    }, `Review process`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#after-submitting-your-change\"\n      }\n    }, `After submitting your change`)))), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"#getting-more-involved\"\n      }\n    }, `Getting more involved`))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Getting started`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Very first steps`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Not sure where to start? If you haven't already, take a look at the\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://xi-editor.github.io/xi-editor/docs.html\"\n      }\n    }, `docs`), ` to get a better\nsense of the project. Read through some issues and some open PRs, to\nget a sense for the habits of existing contributors. Drop by the #xi-editor\nchannel on `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://xi.zulipchat.com\"\n      }\n    }, `Zulip`), ` to follow\nongoing discussions or ask questions. Clone the repos you're\ninterested in, and make sure you can build and run the tests. If you\ncan't, open an issue, and someone will try to help. Once you're up and\nrunning, there are a a number of ways to participate:`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Opening issues`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you have a question or a feature request or think you've found a bug,\nplease open an issue. When opening an issue, include any details that\nmight be relevant: for a bug this might be the steps required to\nreproduce; for a feature request it might be a detailed explanation of\nthe behaviour you are imagining, an outline of how it would be used,\nand/or examples of how this feature is used in other editors.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Before you open an issue`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Before opening an issue, `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `try to identify where the issue belongs`), `.\nIs it a problem with the frontend or with core? The frontend is\nresponsible for drawing windows and UI, and handling events; the core\nis responsible for most everything else. Issues with the frontend\nshould be opened in that frontend's repository, and issues with\ncore should be opened in the\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/xi-editor/xi-editor/issues\"\n      }\n    }, `xi-editor`), ` repo.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Finally, before opening an issue, `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `use github's search bar`), ` to make\nsure there isn't an existing (open or closed) issue for your particular\nproblem.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Participating in discussions`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `An `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `explicit`), ` goal of xi-editor is to be an educational resource.\nEveryone is encouraged to participate in discussion issues (issues with\nthe 'discussion' or 'planning' labels), and we expect people\nparticipating in discussions to be respectful of the fact that we all\nhave different backgrounds and levels of experience. Similarly, if\nsomething is confusing, feel free to ask for clarification! If you're\nconfused, other people probably are as well.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Improving and reviewing docs`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If the docs are unclear or incomplete, please open an issue or a PR to\nimprove them. This is an especially valuable form of feedback from new\ncontributors, who are seeing things for the first time, and will be best\npositioned to identify areas that need improvement.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Reviewing and testing changes`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `One of the best ways to get more familiar with the project is by reading\nother people's pull requests. If there's something in a commit that you\ndon't understand, this is a great time to ask for clarification. Testing\nchanges is also very helpful, especially for bug fixes or feature\nadditions. Check out a change and try it out; does it work? Can you find\nedge cases? Manual testing is very valuable. For more information on\nreviews, see `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"#review-process\"\n      }\n    }, `code review process`), `.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Proposing and making changes`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Finding something to work on`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you're looking for something to work on, a good first step is to browse\nthe `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/xi-editor/xi-editor/issues\"\n      }\n    }, `issues`), `. Specifically,\nissues that are labeled\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/xi-editor/xi-editor/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22\"\n      }\n    }, `help wanted`), ` and/or\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/xi-editor/xi-editor/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy\"\n      }\n    }, `easy`), `\nare good places to start. If you can't find anything there, feel free to ask\non Zulip, or play around with the editor and try to identify something that\n`, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `you`), ` think is missing.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Before you start work`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Before starting to work on an issue, consider the following:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Is it a bugfix or small change?`), ` If you notice a small bug somewhere,\nand you believe you have a fix, feel free to open a pull request directly.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Is it a feature?`), ` If you have an idea for a new editor feature that is\nalong the lines of something that already exists (for instance, adding a\nnew command to reverse the letters in a selected region) `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `consider`), `\nopening a short issue beforehand, describing the feature you have in mind.\nOther contributors might be able to identify possible issues or\nrefinements. This isn't `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `necessary`), `, but it might end up saving you work,\nand it means you will get to close an issue when your PR gets merged,\nwhich feels good.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Is it a major feature, affecting for instance the behaviour or appearance\nof a frontend, or the API or architecture of core?`), ` Before working on a\nlarge change, please open a discussion/proposal issue. This should describe\nthe problem you're trying to solve, and the approach you're considering;\nthink of this as a 'lite' version of Rust's\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/rust-lang/rfcs\"\n      }\n    }, `RFC`), ` process.`))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Before you open your PR`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Before pressing the 'Create pull request' button,`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Run the tests`), `. It's easy to accidentally break something with even a small\nchange, so always run the tests locally before submitting (or updating) a PR.\nYou can run all checks locally with the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `xi-editor/rust/run_all_checks`), `. script.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Add a message for your reviewers`), `. When submitting a PR, take advantage\nof the opportunity to include a message. Your goal here should be to help\nyour reviewers. Are there any parts of your change that you're uncertain\nabout? Are there any non-obvious explanations for some of your decisions?\nIf your change changes some behaviour, how might it be tested?`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"strong\"\n    }, `Be your own first reviewer`)), `. On the page where you enter your message,\nyou have a final opportunity to see your PR `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `as it will be seen by your\nreviewers`), `. This is a great opportunity to give it one last review, yourself.\nImagine that it is someone else's work, that you're reviewing: what comments\nwould you have? If you spot a typo or a problem, you can push an update in\nplace, without losing your PR message or other state.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Add yourself to the AUTHORS file`), `. If this is your first substantive pull\nrequest in this repo, feel free to add yourself to the AUTHORS file.`))), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Review process`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Every non-trivial pull request goes through review. Everyone is welcome to\nparticipate in review; review is an excellent time to ask questions about\ncode or design decisions that you don't understand.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All pull requests must be approved by an appropriate reviewer before they\nare merged. For bug fixes and smaller changes, this can be anyone who has\ncommit rights to the repo in question; larger changes (changes which add a\nfeature, or significantly change behaviour or API) should also be approved by\na maintainer.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Before being merged, a change must pass\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://en.wikipedia.org/wiki/Continuous_integration\"\n      }\n    }, `CI`), `.`), React.createElement(MDXTag, {\n      name: \"h4\",\n      components: components\n    }, `Responsibilites of the approving reviewer`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you approve a change, it is expected that you:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `understand what the change is trying to do, and how it is doing it`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `have manually built and tested the change, to verify it works as intended`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `believe the change generally matches the idioms, formatting rules,\nand overall coding style of the relevant repo`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `are ready and able to help resolve any problems that may be introduced by\nmerging the change.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If a PR is made by a contributor who has write access to the repo in question,\nthey are responsible for merging/rebasing the PR after it has been approved;\notherwise it will be merged by the reviewer.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If a patch adds or modifies behaviour that is observable in the client,\nthe reviewer should build the patch and verify that it works as expected.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `After submitting your change`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You've done all this, and submitted your patch. What now?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Read other PRs`), `. If you're waiting for a review, it's likely that other\npull requests are waiting for review as well. This can be a good time\nto go and take a look at what other work is happening in the project;\nand if another PR has review comments, it might provide a clue to the\ntype of feedback you might expect.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Patience`), `. As a general goal, we try to respond to all pull requests\nwithin a few days, and to do preliminary review within a week, but we\ndon't always succeed. If you've opened a PR and haven't heard from\nanyone, feel free to comment on it, or stop by the Zulip channel, to ask\nif anyone has had a chance to take a look. It's very possible that it's\nbeen lost in the shuffle.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Getting more involved`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you are participating in the xi-editor project, you may receive\nadditional privileges:`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Organization membership`), `: If you are regularly making contributions\nto a xi project, in any of the forms outlined above, we will be happy to\nadd you to the xi-editor organization, which will give you the ability\nto do things like add labels to issues and view active projects.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Contributor`), `: If you are regularly making substantive contributions\nto a specific xi project, we will be happy to add you as a contributor\nto the repo in question. Contributors are encouraged to review and\napprove changes, respond to issues, and generally help to maintain\nthe project in question.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `Maintainer`), `: If you are making substantive contributions to multiple\nrepos over an extended period, you are regularly reviewing the work of\nother contributors, and you are actively participating in planning and\ndiscussion, you may, (at the discretion of @raphlinus) be invited to\ntake on the role of `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `maintainer`), `. Maintainers are responsible for\ncoordinating the general direction of the project, resolving\narchitectural questions, and doing the day to day work of moving the\nproject forward.`));\n  }\n\n}"},"excerpt":"The xi-editor project is committed to fostering and preserving a\ndiverse, welcoming community; all participants are expected to\nfollow the  Code of Conduct . Getting Started Very first steps Opening issues Participating in discussions Improving and reviewing docs Reviewing and testing changes…","frontmatter":{"title":"Contribute"}}},"pageContext":{}}