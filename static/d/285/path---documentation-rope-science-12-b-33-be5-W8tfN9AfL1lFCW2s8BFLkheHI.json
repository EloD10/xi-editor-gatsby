{"data":{"mdx":{"id":"e118ecf7-5013-50ec-90b2-1f56d7bb1bac","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `24 Nov 2017`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This post describes some of the motivations, theory, and implementation behind\n\"minimal invalidation\" (also tracked in issue #317).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A major part of the philosophy of performance in xi is that as much of the processing\nas possible is `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `incremental.`), ` Basically, this means that a change to the document\nis represented as an explicit `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `delta,`), ` then this delta propagates through the\nrendering pipeline. Ideally, the code touches only a tiny part of the document.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Here we will talk mostly about the implementation in the core, but getting small\ndeltas to the front-end is also important. In an incremental style the front-end\ncan re-render only what's in the delta, and then ideally use graphics hardware to\nre-composite the document view, resulting in much improved latency and power\nconsumption, among other things.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Note that an incremental style is not the only way to write a performant editor.\nIf rendering is fast, then it's much simpler to just re-render the entire document\nwindow on every update. That is very much the style of video games, for example,\nwhere they have to re-draw the world on every frame in any case.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `The render function`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Here, we'll consider rendering the document as a purely functional program. The\ncore's responsibility is to produce a sequence of `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `rendered lines,`), ` which are\nbasically strings with attributes for syntax highlighting and selection carets.\nObviously, further stages in the pipeline (all in the front-end) convert this\nrepresentation into pixels displayed on a screen.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The input to the render function consists of the text (conceptually just a string),\nstyle spans, the selection, and the line breaks (when word wrapping is in effect).\nThere's also some other stuff, like the results of a \"find\" command, but let's keep\nit simple for now. In fact, to keep things really simple, let's just focus on the\ntext, as the concepts are similar, it's just more merging of more inputs.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The line breaks structure is conceptually just a sequence of offsets corresponding\nto the end of each line. (See the rope science posts on `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"rope_science_02.md\"\n      }\n    }, `Metrics`), `\nand `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"rope_science_06.md\"\n      }\n    }, `Word Wrapping`), ` for more on how these breaks are determined\nand represented).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Thus, as an imperative program, the simplified render function is almost trivial:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-(python)\"\n      }\n    }, `def render(text, breaks):\n    rendered = []\n    last = 0\n    for break in breaks:\n        rendered.append(text[last:break])\n        last = break\n    return rendered\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Obviously, adding styles and selections makes it more complicated, but the basic\nstructure is the same. However, if the document is very large, then recomputing\nthis on every keystroke is wasteful, much less serializing it and sending it over\nan RPC channel.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Can we systematically transform this into an incremental algorithm? Why yes, we can.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The first thing to notice is that every line is independent of every other line.\nIn addition, to actually draw pixels, we don't need all the lines, just the ones\nthat appear inside the viewport. When changes happen outside this viewport, ideally\nwe'd like to avoid sending an update at all (one way this can happen in practice is\nwhen making a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"rope_science_11.md\"\n      }\n    }, `syntax highlighting`), ` change that ripples to the\nend of the document). Thus, we want to go beyond making it incremental and also make\nit `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `lazy`), ` in a way, only spending the work to compute the slice or view that's\nactually needed. The front-end then holds not the entire result of the render\nfunction, but a cache of it, with each line either valid (and thus guaranteed to\nmatch the result of the render function), or invalid. When the front-end needs\na line not in the cache (for example, when scrolling), it requests it from the core.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The version of the render function designed to compute a single rendered line at\na time is in a way even simpler:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-(python)\"\n      }\n    }, `def render_line(text, breaks, line_num):\n    return text[breaks[line_num - 1] : breaks[line_num]]\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `(Assume here that `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `breaks`), ` is a fancy object that's designed to return 0 when\nindexed with -1.)`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `The update protocol`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Given that the output of our incremental render algorithm is a delta, we need a way\nto represent it explicitly. We then serialize the delta and send it from the core\nto the front-end as an asyncronous (but in-order) notification.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The delta can be interpreted as a function from the previous value of the render\nfunction (a sequence of lines) to the next value. It's also worth being able to\nintrospect into this function, for example to know what's changed so only some\nlayers need to be re-rendered in a compositing UI pipeline.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A slight complication is that lines in the front-end's cache might be invalid.\nIn our architecture, the core is in charge of which lines are valid (see #280 for\ndiscussion of this decision).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The representation of deltas of this kind is reasonably well understood. The output\nof Unix `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://en.wikipedia.org/wiki/Diff_utility\"\n      }\n    }, `diff`), `, for example, is a\nsequence of insert and delete operations interspersed with unmodified runs. The\ndetails of representation are not terribly important. In xi, we ended up with a\nsequence of `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `invalidate`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `skip`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `copy`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ins`), `, and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `update`), ` operations (this last\nis for updating only styles and cursors when the text is otherwise unchanged). The\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ins`), ` operation is the same as diff, while deletion is represented as two `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `copy`), `\noperations with a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `skip`), ` in the middle. See `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"frontend-protocol.md#xi-view-update-protocol\"\n      }\n    }, `Xi view update protocol`), ` for detailed\ndocumentation on the update method.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `The render plan`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In the current architecture, the core is in charge of the cache state,\nespecially which lines are valid and which lines are invalid. The core tracks\nthe scrolled viewport (through the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `scroll`), ` notification) but might lag behind.\nAll lines inside the viewport must be valid, in order to draw correctly. For\nlines outside the viewport, either choice is reasonable. Keeping a line valid\ncan be helpful on scrolling, as it then doesn't need to be requested from the\ncore, but it comes at a storage cost, so should be bounded (especially for large\ndocuments). In addition, when updating, actually visible lines `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `must`), ` be the\npriority, as re-validating additional lines takes extra time to compute,\nserialize, and process.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Thus, at every opportunity to update, xi produces a `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `render plan.`), ` For every\nline, one of three things can happen: it can be discarded even if it was valid,\nit can be preserved if valid, or it can be rendered if invalid. The render plan\nchooses rendering for the visible viewport (plus a very small \"slop\" for\nscrolling), preserving for a range extending 1000 lines from the viewport, and\ndiscards the rest. The theory is that preserving existing valid lines comes at\na very small cost; no additional computation or communication is needed, just\nthe storage in the cache.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Changing the viewport (for example, when scrolling) updates the render plan. In\naddition, the front-end can explicitly request additional lines, and those are\nadded to the render plan as well. For any given render plan, it's possible that\nan update would be a no-op, in which case it's not sent at all.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The render plan is stored in the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `RenderPlan`), ` struct, in `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `line_cache_shadow.rs`), `.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Computing minimal deltas`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `With these requirements, we can start looking at how to actually produce the\ndeltas. For any given editing operation, it would be possible to directly work\nout the corresponding delta to the render, but that is potentially a large\nnumber of cases, and also doesn't smoothly handle aggregating a sequence of\nchanges into a single render. There is a more systematic way.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We propose a data structure here called the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `line cache shadow.`), ` It is\nessentially the skeleton of the render result, but stored in extremely\nlightweight form, and easy to update. Then, to actually produce the delta, we\ntraverse the render plan and the line cache shadow. Along with producing the\ndelta is a new line cache shadow, which, before any additional edits,\njust tracks which lines are valid.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Conceptually, each line in the line cache shadow is either a reference to a\nline in the front-end's line cache, or an indication it is invalid. Updating\nthe shadow is straightforward: to insert a line, insert \"invalid\", and to delete\na line, delete it in the shadow. Note that in the delete case, a gap occurs in the\nreferences to the existing valid lines; when synthesizing the delta, this is\nthe cue to issue a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `skip`), ` command.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Similarly, to rewrap a paragraph (changing line breaks in it), just replace\nthe range of lines of the paragraph with a new range, all invalid. And, using\nthe `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"rope_science_06.md\"\n      }\n    }, `incremental re-wrap technique`), `, possibly the entire\nparagraph need not be invalidated.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Synthesizing the delta from the shadow and render plan is then straightforward.\nWhen the plan calls for discarding, issue `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `skip`), `. When it calls for preserving,\nissue `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `invalid`), ` for invalid lines in the shadow, or `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `copy`), ` for valid lines.\nAnd when it calls for rendering, re-render and issue `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ins`), ` for invalid lines,\nand `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `copy`), ` for valid lines. And for each `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `copy`), `, add a `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `skip`), ` if the line number\nis not sequential.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `As a further refinement in practice, a line may be partially valid. A common\nand important case is that the text and styles are valid, but the cursor has\nchanged. We use a bitset to keep track of partial validity, and then when\nrendering partially valid lines send an `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `update`), ` rather than an `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ins`), `. For\ncursor movement, a sophisticated front-end might then just update the cursor\nlayer without needing to re-render any of the text.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The line cache shadow data structure itself (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `LineCacheShadow`), `) is extremely\nsmall and lightweight to compute, as it's stored in run-length form. In the\nabsolute worst case, upon edit the cache can just be replaced with a single\nspan indicating all lines are invalid.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Conclusion`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The mechanisms described here are fairly elaborate, but they all flow from a\nclear specification of the problem as a functional program, and from that we\ncan systematically derive the incremental algorithm. Further, the correctness\ncriterion is clear (applying the resulting delta should yield the same result\nas recomputing from scratch), and we hope to use property testing to ensure\nthat.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Producing minimal deltas is key to xi delivering on its promised performance\ngoals, and should result in best-in-class latency and editing smoothness, all\nat minimal power costs.`));\n  }\n\n}"},"excerpt":"24 Nov 2017 This post describes some of the motivations, theory, and implementation behind\n\"minimal invalidation\" (also tracked in issue #317). A major part of the philosophy of performance in xi is that as much of the processing\nas possible is  incremental.  Basically, this means that a change to…","frontmatter":{"title":"Rope science, part 12 - minimal invalidation"}},"allMdx":{"edges":[{"node":{"id":"eb5c18e5-3b3e-5724-b55a-a3c1a6cfd2b6","fields":{"slug":"/frontend-notes/"},"frontmatter":{"title":"Notes on writing front-ends"}}},{"node":{"id":"bcf93b0a-ce67-5b53-9d9c-cb8cecedda7c","fields":{"slug":"/frontend-protocol/"},"frontmatter":{"title":"The Frontend Protocol"}}},{"node":{"id":"586f0992-4df6-5aff-ab4d-4d001717fdb7","fields":{"slug":"/plugin/"},"frontmatter":{"title":"Plugin architecture"}}},{"node":{"id":"c52e11a1-2ec8-5aed-ae24-c348d815e5ad","fields":{"slug":"/config/"},"frontmatter":{"title":"Working with the config system"}}},{"node":{"id":"8d6ee533-793b-53cc-87a1-2f1c34e2c2f2","fields":{"slug":"/crdt/"},"frontmatter":{"title":"CRDT - An approach to async plugins and undo"}}},{"node":{"id":"f0e30ba2-3b2d-549c-9b6a-735be81510c2","fields":{"slug":"/crdt-details/"},"frontmatter":{"title":"CRDT - The Xi Text Engine"}}},{"node":{"id":"5bbb9cf5-ff60-52f8-a003-e3882a1b7309","fields":{"slug":"/fuchsia-ledger-crdts/"},"frontmatter":{"title":"CRDT - Using the Ledger for CRDTs"}}},{"node":{"id":"375a35e7-76a5-5da9-bc31-5a3938b28218","fields":{"slug":"/rope-science-00/"},"frontmatter":{"title":"Rope science - Introduction"}}},{"node":{"id":"b28f280e-b2e5-5eee-9d5e-f605fbcdd251","fields":{"slug":"/rope-science-01/"},"frontmatter":{"title":"Rope science, part 1 - MapReduce for text"}}},{"node":{"id":"2c0fcbef-2a60-531f-a7e2-b1d13b72d4d9","fields":{"slug":"/rope-science-02/"},"frontmatter":{"title":"Rope science, part 2 - metrics"}}},{"node":{"id":"bfa895b4-5b90-5766-87d3-73300d6c75e6","fields":{"slug":"/rope-science-03/"},"frontmatter":{"title":"Rope science, part 3 - Grapheme cluster boundaries"}}},{"node":{"id":"177edfe8-21d9-539d-9bb8-467da07dfae9","fields":{"slug":"/rope-science-04/"},"frontmatter":{"title":"Rope science, part 4 - parenthesis matching"}}},{"node":{"id":"a4c8952a-ee4f-5ff0-bd25-caa35f52e05a","fields":{"slug":"/rope-science-05/"},"frontmatter":{"title":"Rope science, part 5 - incremental word wrapping"}}},{"node":{"id":"e39af624-e9c6-5ea2-b6fc-2ed34020ec09","fields":{"slug":"/rope-science-06/"},"frontmatter":{"title":"Rope science, part 6 - parallel and asynchronous word wrapping"}}},{"node":{"id":"d5d0c9f5-2466-5157-b327-4c09985966c6","fields":{"slug":"/rope-science-08/"},"frontmatter":{"title":"Rope science, part 8 - CRDTs for concurrent editing"}}},{"node":{"id":"c0341fdb-b2d4-5957-94f7-b7281de4c70e","fields":{"slug":"/rope-science-09/"},"frontmatter":{"title":"Rope science, part 9 - CRDT Approach to Async Plugins and Undo"}}},{"node":{"id":"04583f02-ba9e-507e-95a0-a481d948f8a5","fields":{"slug":"/rope-science-10/"},"frontmatter":{"title":"Rope science, part 10 - designing for a conflict-free world"}}},{"node":{"id":"996c58eb-59ad-5e1e-841e-382fc08d23bb","fields":{"slug":"/rope-science-11/"},"frontmatter":{"title":"Rope science, part 11 - practical syntax highlighting"}}},{"node":{"id":"e118ecf7-5013-50ec-90b2-1f56d7bb1bac","fields":{"slug":"/rope-science-12/"},"frontmatter":{"title":"Rope science, part 12 - minimal invalidation"}}}]}},"pageContext":{"id":"e118ecf7-5013-50ec-90b2-1f56d7bb1bac"}}