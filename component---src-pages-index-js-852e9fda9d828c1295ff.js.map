{"version":3,"sources":["webpack:///./src/components/image.js","webpack:///./src/pages/index.js"],"names":["Image","_ref","className","alt","react_default","a","createElement","gatsby_browser_entry","query","render","data","gatsby_image_default","fluid","placeholderImage","childImageSharp","_798576304","Wrapper","Object","styled_base_browser_esm","target","name","styles","IndexPage","layout","components_image"],"mappings":"2KA0CeA,EA3BD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,IAAd,OACZC,EAAAC,EAAAC,cAACC,EAAA,YAAD,CAMEC,MAAK,YAWLC,OAAQ,SAAAC,GAAI,OACVN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAOF,EAAKG,iBAAiBC,gBAAgBF,MAC7CV,UAAWA,EACXC,IAAKA,KArBXO,KAAAK,KCVIC,EAAUC,OAAAC,EAAA,EAAAD,CAAA,MAAHE,OAAA,aAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,gDAwDEC,UAjDG,kBAChBlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,2BACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,SACbE,EAAAC,EAAAC,cAAA,MAAIJ,UAAU,0CAAd,aACAE,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,uBAAb,uBACAE,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,8BAAb,2RAOAE,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,aAAb,kBACAE,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,aAAhB,gCADF,sHAKAE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,aAAhB,WADF,qPAOAE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,aAAhB,gBADF,2DAIAE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,aAAhB,2BADF,kGAMFE,EAAAC,EAAAC,cAAA,4FAKFF,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,cACbE,EAAAC,EAAAC,cAACkB,EAAD,CAAOtB,UAAU,WAAWC,IAAI","file":"component---src-pages-index-js-852e9fda9d828c1295ff.js","sourcesContent":["import React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n\r\n/*\r\n * This component is built using `gatsby-image` to automatically serve optimized\r\n * images with lazy loading and reduced file sizes. The image is loaded using a\r\n * `StaticQuery`, which allows us to load the image from directly within this\r\n * component, rather than having to pass the image data down from pages.\r\n *\r\n * For more information, see the docs:\r\n * - `gatsby-image`: https://gatsby.app/gatsby-image\r\n * - `StaticQuery`: https://gatsby.app/staticquery\r\n */\r\n\r\nconst Image = ({ className, alt }) => (\r\n  <StaticQuery\r\n    // https://github.com/gatsbyjs/gatsby/issues/9047\r\n    // It probably can be useful for that case!\r\n    // Example:\r\n    // let image = \"example.png\"\r\n    // `file(relativePath: { eq: image })`\r\n    query={graphql`\r\n      query {\r\n        placeholderImage: file(relativePath: { eq: \"home.png\" }) {\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => (\r\n      <Img\r\n        fluid={data.placeholderImage.childImageSharp.fluid}\r\n        className={className}\r\n        alt={alt}\r\n      />\r\n    )}\r\n  />\r\n)\r\nexport default Image\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport Layout from '../components/layout'\r\nimport Image from '../components/image'\r\n\r\nconst Wrapper = styled.ul`\r\n  & > ${'li'} {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n`\r\n\r\nconst IndexPage = () => (\r\n  <Layout>\r\n    <div className=\"flex text-grey-darkest \">\r\n      <div className=\"w-3/5\">\r\n        <h1 className=\"mx-4 md:mx-0 mt-4 font-medium text-4xl\">Xi-Editor</h1>\r\n        <p className=\"italic text-sm mb-4\">(pronounced \"Zigh\")</p>\r\n        <p className=\"text-normal leading-normal\">\r\n          The xi editor project is an attempt to build a high quality text\r\n          editor, using modern software engineering techniques. It is initially\r\n          built for macOS, using Cocoa for the user interface. There are also\r\n          frontends for other operating systems available from third-party\r\n          developers.\r\n        </p>\r\n        <p className=\"mt-4 mb-2\">Goals include:</p>\r\n        <Wrapper>\r\n          <li>\r\n            <span className=\"font-bold\">Incredibly high performance.</span> All\r\n            editing operations should commit and paint in under 16ms. The editor\r\n            should never make you wait for anything.\r\n          </li>\r\n          <li>\r\n            <span className=\"font-bold\">Beauty.</span> The editor should fit\r\n            well on a modern desktop, and not look like a throwback from the\r\n            ’80s or ’90s. Text drawing should be done with the best technology\r\n            available (Core Text on Mac, DirectWrite on Windows, etc.), and\r\n            support Unicode fully.\r\n          </li>\r\n          <li>\r\n            <span className=\"font-bold\">Reliability.</span> Crashing, hanging,\r\n            or losing work should never happen.\r\n          </li>\r\n          <li>\r\n            <span className=\"font-bold\">Developer friendliness.</span> It should\r\n            be easy to customize xi editor, whether by adding plug-ins or\r\n            hacking on the core.\r\n          </li>\r\n        </Wrapper>\r\n        <p>\r\n          Please refer to the October 2018 roadmap to learn more about planned\r\n          features.\r\n        </p>\r\n      </div>\r\n      <div className=\"w-2/5 mt-4\">\r\n        <Image className=\"max-w-sm\" alt=\"xi-editor-incrustation\" />\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport default IndexPage\r\n"],"sourceRoot":""}